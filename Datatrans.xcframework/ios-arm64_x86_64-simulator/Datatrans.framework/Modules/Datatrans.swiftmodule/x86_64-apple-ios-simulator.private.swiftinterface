// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target x86_64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name Datatrans
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import AudioToolbox
import CommonCrypto
import CoreHaptics
@_exported import Datatrans
import DeveloperToolsSupport
import Foundation
import PassKit
import SafariServices
import Swift
import SwiftUI
import UIKit
import Vision
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_inheritsConvenienceInitializers @objc(DTTransactionError) public class TransactionError : Foundation.NSError {
  @objc public static let technical: Swift.Int
  @objc public static let validation: Swift.Int
  @objc public static let authentication: Swift.Int
  @objc public static let authorization: Swift.Int
  public var paymentMethodType: Datatrans.PaymentMethodType? {
    get
  }
  @objc(paymentMethodType) public var paymentMethodTypeObjc: Foundation.NSNumber? {
    @objc get
  }
  @objc public var transactionId: Swift.String? {
    get
  }
  @objc public var backendError: Datatrans.BackendError? {
    @objc get
  }
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc override dynamic public init(domain: Swift.String, code: Swift.Int, userInfo dict: [Swift.String : Any]? = nil)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(DTPCIPCardInfo) @objcMembers public class PCIPCardInfo : ObjectiveC.NSObject {
  @objc final public let brand: Swift.String?
  @objc final public let countryCode: Swift.String?
  @objc final public let issuer: Swift.String?
  @objc final public let maskedCardNumber: Swift.String
  @objc final public let expiryDate: Datatrans.CardExpiryDate
  @objc final public let type: Swift.String?
  @objc final public let usage: Swift.String?
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc(DTTransactionDelegate) public protocol TransactionDelegate {
  @objc func transactionDidFinish(_ transaction: Datatrans.Transaction, result: Datatrans.TransactionSuccess)
  @objc func transactionDidFail(_ transaction: Datatrans.Transaction, error: Datatrans.TransactionError)
  @objc optional func transactionDidCancel(_ transaction: Datatrans.Transaction)
}
@_hasMissingDesignatedInitializers @objc(DTCard) @objcMembers public class Card : Datatrans.PaymentMethod {
  @objc public var number: Swift.String
  @objc public var expiryDate: Datatrans.CardExpiryDate
  @objc public var cvv: Swift.String?
  @objc public var cardholder: Swift.String?
  @objc public init(type: Datatrans.PaymentMethodType, number: Swift.String, expiryDate: Datatrans.CardExpiryDate, cvv: Swift.String?, cardholder: Swift.String?)
  @objc required public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(DTSavedApplePay) @objcMembers public class SavedApplePay : Datatrans.SavedPaymentMethod {
  @objc public var token: Datatrans.SavedCard
  @objc public var last4: Swift.String?
  @objc override public var displayTitle: Swift.String {
    @objc get
  }
  @objc override public var accessibilityTitle: Swift.String {
    @objc get
  }
  override public func encode(to encoder: any Swift.Encoder) throws
  @objc required public init?(coder: Foundation.NSCoder)
  @objc override public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc(DTInitialLoaderDelegate) public protocol InitialLoaderDelegate {
  @objc func dismissLoader()
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(DTAppCallbackHandler) @objcMembers final public class AppCallbackHandler : ObjectiveC.NSObject {
  @objc public static let shared: Datatrans.AppCallbackHandler
  @objc final public var automaticCallbacks: Swift.Bool
  @objc final public func handleURL(_ url: Foundation.URL) -> Swift.Bool
  @objc deinit
}
@objc(DTBoncardType) public enum BoncardType : Swift.Int, Swift.CaseIterable {
  case giftCard
  case boncard
  case lunchCheck
  case sbbVoucher
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [Datatrans.BoncardType]
  public typealias RawValue = Swift.Int
  public static var allCases: [Datatrans.BoncardType] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@objc(DTPCIPCVVOnlyCard) @objcMembers public class PCIPCVVOnlyCard : ObjectiveC.NSObject {
  @objc public var maskedCardNumber: Swift.String
  @objc public var expiryDate: Datatrans.CardExpiryDate
  @objc public init(type: Datatrans.PaymentMethodType, maskedCardNumber: Swift.String, expiryDate: Datatrans.CardExpiryDate)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(DTSavedReka) @objcMembers public class SavedReka : Datatrans.SavedCard {
  @objc convenience public init(alias: Swift.String, cardExpiryDate: Datatrans.CardExpiryDate, maskedCardNumber: Swift.String?, cardholder: Swift.String?)
  @objc override public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc override public init(type: Datatrans.PaymentMethodType, alias: Swift.String, cardExpiryDate: Datatrans.CardExpiryDate?, maskedCardNumber: Swift.String?, cardholder: Swift.String?)
  @objc required public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(DTPCIPTokenizationError) public class PCIPTokenizationError : Foundation.NSError {
  @objc public static let technical: Swift.Int
  @objc public static let validation: Swift.Int
  @objc public var backendError: Datatrans.BackendError? {
    @objc get
  }
  @objc override dynamic public init(domain: Swift.String, code: Swift.Int, userInfo dict: [Swift.String : Any]? = nil)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(DTTransactionOptions) @objcMembers public class TransactionOptions : ObjectiveC.NSObject {
  @objc public var appCallbackScheme: Swift.String?
  @objc public var applePayConfig: Datatrans.ApplePayConfig?
  @objc public var boncardConfig: Datatrans.BoncardConfig?
  @objc public var cardLabelType: Datatrans.CardLabelType
  @objc public var customKlarnaPaymentMethodName: Swift.String?
  @objc public var merchantProperties: [Swift.String : Swift.String]?
  @objc public var suppressCriticalErrorDialog: Swift.Bool
  @objc public var testing: Swift.Bool
  @objc public var twintMaxIssuerNumber: Swift.Int
  @objc public var useCertificatePinning: Swift.Bool
  @objc weak public var customInitialLoaderDelegate: (any Datatrans.InitialLoaderDelegate)?
  @objc(DTDCCShowMode) public enum DCCShowMode : Swift.Int {
    case always
    case smart
    case never
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public var savedCardDCCShowMode: Datatrans.TransactionOptions.DCCShowMode
  @objc override dynamic public init()
  @objc deinit
}
@objc(DTPCIPTokenizationDelegate) public protocol PCIPTokenizationDelegate {
  @objc func tokenizationDidFinish(_ tokenization: Datatrans.PCIPTokenization, result: Datatrans.PCIPTokenizationSuccess)
  @objc func tokenizationDidFail(_ tokenization: Datatrans.PCIPTokenization, error: Datatrans.PCIPTokenizationError)
  @objc optional func tokenizationDidCancel(_ tokenization: Datatrans.PCIPTokenization)
}
@_inheritsConvenienceInitializers @objc(DTBackendError) public class BackendError : Foundation.NSError {
  @objc public var name: Swift.String {
    @objc get
  }
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc override dynamic public init(domain: Swift.String, code: Swift.Int, userInfo dict: [Swift.String : Any]? = nil)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(DTSavedBoncard) @objcMembers public class SavedBoncard : Datatrans.SavedPaymentMethod {
  @objc final public let boncardType: Datatrans.BoncardType
  @objc public var maskedCardNumber: Swift.String? {
    get
  }
  @objc public init(alias: Swift.String, maskedCardNumber: Swift.String?, boncardType: Datatrans.BoncardType)
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  override public func encode(to encoder: any Swift.Encoder) throws
  @objc required public init?(coder: Foundation.NSCoder)
  @objc override public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(DTPCIPTokenizationOptions) @objcMembers public class PCIPTokenizationOptions : ObjectiveC.NSObject {
  @objc public var language: Swift.String? {
    @objc get
    @objc set
  }
  @objc public var suppressCriticalErrorDialog: Swift.Bool
  @objc public var testing: Swift.Bool
  @objc public var useCertificatePinning: Swift.Bool
  @objc public var cardholder: Datatrans.PCIPCardholder
  @objc weak public var customInitialLoaderDelegate: (any Datatrans.InitialLoaderDelegate)?
  @objc override dynamic public init()
  @objc deinit
}
@objc(DTPaymentMethodType) public enum PaymentMethodType : Swift.Int, Swift.CaseIterable {
  case Visa
  case MasterCard
  case DinersClub
  case AmericanExpress
  case JCB
  case UATP
  case Discover
  case Supercard
  case PostFinanceCard
  case PostFinanceEFinance
  case PayPal
  case Easypay
  case SEPA
  case SwissBilling
  case Twint
  case ApplePay
  case Reka
  case CembraPay
  case SwissPass
  case Powerpay
  case Paycard
  case Paysafecard
  case Boncard
  case Elo
  case Hipercard
  case Klarna
  case Dankort
  case Swish
  case Vipps
  case MobilePay
  case Maestro
  case ChinaUnionPay
  case HalfFarePlus
  case IDEAL
  case PostFinancePay
  public var identifier: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [Datatrans.PaymentMethodType]
  public typealias RawValue = Swift.Int
  public static var allCases: [Datatrans.PaymentMethodType] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@objc(DTTransaction) public class Transaction : ObjectiveC.NSObject, Datatrans.DTErrorHandlerDelegate {
  @objc weak public var delegate: (any Datatrans.TransactionDelegate)?
  @objc public var options: Datatrans.TransactionOptions
  @objc public var theme: Datatrans.ThemeConfiguration
  @objc public init(mobileToken: Swift.String)
  @objc public init(mobileToken: Swift.String, card: Datatrans.Card)
  @objc public init(mobileToken: Swift.String, savedPaymentMethod: Datatrans.SavedPaymentMethod)
  @objc public init(mobileToken: Swift.String, savedPaymentMethods: [Datatrans.SavedPaymentMethod])
  @objc public func start(presentingController: UIKit.UIViewController)
  @objc public func didHandleError(_ error: any Swift.Error)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(DTSavedSEPA) @objcMembers public class SavedSEPA : Datatrans.SavedPaymentMethod {
  @objc public var bankCode: Swift.String? {
    @objc get
  }
  @objc override public var alias: Swift.String {
    @objc get
    @objc set
  }
  @objc convenience public init(alias: Swift.String)
  @objc convenience public init(alias: Swift.String, bankCode: Swift.String)
  @objc override public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc override public init(type: Datatrans.PaymentMethodType, alias: Swift.String)
  @objc required public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@available(iOS 14.0, *)
extension SwiftUI.View {
  public func datatrans(startWithTransaction: SwiftUI.Binding<Datatrans.Transaction?>) -> some SwiftUI.View
  
  public func datatrans(startWithPCIPTokenization: SwiftUI.Binding<Datatrans.PCIPTokenization?>) -> some SwiftUI.View
  
}
@_inheritsConvenienceInitializers @objc(DTPaymentMethodTypeMapper) public class PaymentMethodTypeMapper : ObjectiveC.NSObject {
  public static func toType(identifier: Swift.String) -> Datatrans.PaymentMethodType?
  @objc(toTypeWithIdentifier:) public static func toTypeObjc(identifier: Swift.String) -> Foundation.NSNumber?
  @objc public static func toIdentifier(type: Datatrans.PaymentMethodType) -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(DTSavedPostFinanceCard) @objcMembers public class SavedPostFinanceCard : Datatrans.SavedCard {
  @objc public init(alias: Swift.String, cardExpiryDate: Datatrans.CardExpiryDate?, maskedCardNumber: Swift.String?, cardholder: Swift.String?)
  @objc required public init?(coder: Foundation.NSCoder)
  @objc override public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(DTThemeConfiguration) @objcMembers public class ThemeConfiguration : ObjectiveC.NSObject {
  @objc public var barBackgroundColor: UIKit.UIColor?
  @objc public var barLinkColor: UIKit.UIColor?
  @objc public var barTitleColor: UIKit.UIColor?
  @objc public var buttonColor: UIKit.UIColor?
  @objc public var buttonTextColor: UIKit.UIColor?
  @objc public var linkColor: UIKit.UIColor?
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(DTSavedPostFinancePay) @objcMembers public class SavedPostFinancePay : Datatrans.SavedPaymentMethod {
  @objc public var maskedAccountNumber: Swift.String?
  @objc override public var displayTitle: Swift.String {
    @objc get
  }
  @objc public init(alias: Swift.String, maskedAccountNumber: Swift.String?)
  @objc required public init?(coder: Foundation.NSCoder)
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  override public func encode(to encoder: any Swift.Encoder) throws
  @objc override public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(DTPCIPTokenizationSuccess) @objcMembers public class PCIPTokenizationSuccess : ObjectiveC.NSObject {
  @objc final public let cardInfo: Datatrans.PCIPCardInfo
  @objc final public let paymentMethodType: Datatrans.PaymentMethodType
  @objc final public let tokenizationId: Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(DTTransactionSuccess) @objcMembers public class TransactionSuccess : ObjectiveC.NSObject {
  @objc final public let paymentMethodType: Datatrans.PaymentMethodType
  @objc final public let savedPaymentMethod: Datatrans.SavedPaymentMethod?
  @objc final public let transactionId: Swift.String
  @objc deinit
}
@objc(DTBoncardConfig) public class BoncardConfig : ObjectiveC.NSObject, Foundation.NSCopying {
  public init(boncardTypes: [Datatrans.BoncardType])
  @objc(initWithBoncardTypes:) convenience public init(boncardTypesObjc: [Foundation.NSNumber])
  @objc public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(DTPCIPCardholder) @objcMembers public class PCIPCardholder : ObjectiveC.NSObject {
  @objc public var emailAddress: Swift.String?
  @objc public var phoneNumber: Swift.String? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(DTSavedCard) @objcMembers public class SavedCard : Datatrans.SavedPaymentMethod {
  @objc public var cardExpiryDate: Datatrans.CardExpiryDate? {
    get
  }
  @objc public var maskedCardNumber: Swift.String? {
    get
  }
  @objc public var cardholder: Swift.String?
  @objc public init(type: Datatrans.PaymentMethodType, alias: Swift.String, cardExpiryDate: Datatrans.CardExpiryDate?, maskedCardNumber: Swift.String?, cardholder: Swift.String?)
  @objc override public func isValid() -> Swift.Bool
  override public func encode(to encoder: any Swift.Encoder) throws
  @objc required public init?(coder: Foundation.NSCoder)
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc override public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
}
@objc(DTApplePayConfig) @objcMembers public class ApplePayConfig : ObjectiveC.NSObject, Foundation.NSCopying {
  @objc weak public var delegate: (any Datatrans.DTApplePayDelegate)?
  @objc public var finalSummaryItemLabel: Swift.String?
  @objc public var request: PassKit.PKPaymentRequest {
    get
  }
  @objc public var showApplePayAsSavedPaymentMethod: Swift.Bool
  @objc public var showLargeButton: Swift.Bool
  @objc public var existingCardRequired: Swift.Bool
  @objc public class func hasApplePay(withSupportedNetworks supportedNetworks: [PassKit.PKPaymentNetwork], existingCardRequired: Swift.Bool) -> Swift.Bool
  @objc public init(applePayMerchantId: Swift.String, supportedNetworks: [PassKit.PKPaymentNetwork], countryCode: Swift.String)
  @objc convenience public init(applePayMerchantId: Swift.String, supportedNetworks: [PassKit.PKPaymentNetwork])
  @objc public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
}
@objc(DTCardLabelType) public enum CardLabelType : Swift.Int {
  case creditOrDebitCard
  case creditCard
  case debitCard
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc(DTPCIPTokenization) public class PCIPTokenization : ObjectiveC.NSObject {
  @objc weak public var delegate: (any Datatrans.PCIPTokenizationDelegate)?
  @objc public var options: Datatrans.PCIPTokenizationOptions
  @objc public var theme: Datatrans.ThemeConfiguration
  @objc public init(merchantId: Swift.String, card: Datatrans.Card)
  public init(merchantId: Swift.String, paymentMethodTypes: [Datatrans.PaymentMethodType])
  @objc public init(merchantId: Swift.String, cvvOnlyCard: Datatrans.PCIPCVVOnlyCard)
  @objc(initWithMerchantId:paymentMethodTypes:) convenience public init(merchantId: Swift.String, paymentMethodTypesObjc: [Foundation.NSNumber])
  @objc public func start(presentingController: UIKit.UIViewController)
  @objc deinit
}
@objc(DTPaymentMethod) @objcMembers public class PaymentMethod : ObjectiveC.NSObject, Swift.Codable, Foundation.NSCoding, Foundation.NSCopying {
  @objc final public let type: Datatrans.PaymentMethodType
  @objc public init(type: Datatrans.PaymentMethodType)
  required public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  @objc public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc required public init?(coder: Foundation.NSCoder)
  @objc public func encode(with coder: Foundation.NSCoder)
  @objc deinit
}
@objc(DTCardExpiryDate) @objcMembers public class CardExpiryDate : ObjectiveC.NSObject, Swift.Codable, Foundation.NSCopying {
  @objc public var formattedMonth: Swift.String {
    @objc get
  }
  @objc public var formattedYear: Swift.String {
    @objc get
  }
  @objc public var month: Swift.Int {
    @objc get
    @objc set
  }
  @objc public var year: Swift.Int {
    @objc get
    @objc set
  }
  @objc public init(month: Swift.Int, year: Swift.Int)
  required public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(DTSavedPaymentMethod) @objcMembers public class SavedPaymentMethod : Datatrans.PaymentMethod {
  @objc public var alias: Swift.String
  @objc public var displayTitle: Swift.String {
    @objc get
  }
  @objc public var accessibilityTitle: Swift.String {
    @objc get
  }
  @objc public init(type: Datatrans.PaymentMethodType, alias: Swift.String)
  @objc public class func create(jsonString: Swift.String) -> Datatrans.SavedPaymentMethod?
  @objc public class func create(legacySavedPaymentMethodData: Foundation.Data) -> Datatrans.SavedPaymentMethod?
  @objc public func toJson() -> Swift.String
  @objc public func isValid() -> Swift.Bool
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  override public func encode(to encoder: any Swift.Encoder) throws
  @objc required public init?(coder: Foundation.NSCoder)
  @objc override public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(DTSavedPayPal) @objcMembers public class SavedPayPal : Datatrans.SavedPaymentMethod {
  @objc public var payPalEmail: Swift.String?
  @objc public init(alias: Swift.String, payPalEmail: Swift.String?)
  override public func encode(to encoder: any Swift.Encoder) throws
  @objc required public init?(coder: Foundation.NSCoder)
  @objc override public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
}
extension Datatrans.BoncardType : Swift.Equatable {}
extension Datatrans.BoncardType : Swift.Hashable {}
extension Datatrans.BoncardType : Swift.RawRepresentable {}
extension Datatrans.TransactionOptions.DCCShowMode : Swift.Equatable {}
extension Datatrans.TransactionOptions.DCCShowMode : Swift.Hashable {}
extension Datatrans.TransactionOptions.DCCShowMode : Swift.RawRepresentable {}
extension Datatrans.PaymentMethodType : Swift.Equatable {}
extension Datatrans.PaymentMethodType : Swift.Hashable {}
extension Datatrans.PaymentMethodType : Swift.RawRepresentable {}
extension Datatrans.CardLabelType : Swift.Equatable {}
extension Datatrans.CardLabelType : Swift.Hashable {}
extension Datatrans.CardLabelType : Swift.RawRepresentable {}
