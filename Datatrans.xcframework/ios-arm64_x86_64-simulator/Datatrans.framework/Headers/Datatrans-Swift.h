#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
#ifndef DATATRANS_SWIFT_H
#define DATATRANS_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
@import PassKit;
#endif

#import <Datatrans/Datatrans.h>

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="Datatrans",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class NSURL;

/// Use this class if your app crashes when switching to/from external payment apps,
/// such as TWINT, Swish, Vipps, and MobilePay. Our automatic app callback logic
/// may interfere with other logic in your app and needs to be disabled.
/// Globally set <code>AppCallbackHandler.shared.automaticCallbacks</code> to <code>false</code>.
/// Then implement the <code>application(_:open:options:)</code> method in your AppDelegate
/// and call <code>AppCallbackHandler.shared.handleURL(url)</code> with the URL received.
SWIFT_CLASS_NAMED("AppCallbackHandler")
@interface DTAppCallbackHandler : NSObject
/// Returns the shared instance of this class.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) DTAppCallbackHandler * _Nonnull shared;)
+ (DTAppCallbackHandler * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// Whether automatic callback handling is enabled or not. By default, automatic callback handling is enabled.
/// Set this to <code>false</code> to disable automatic callbacks and implement them yourself using <code>handleURL(url)</code>.
@property (nonatomic) BOOL automaticCallbacks;
/// Invoke this method from your AppDelegate’s implementation of <code>application(_:open:options:)</code> with the URL received.
/// The method returns <code>true</code> if the URL was handled by the SDK or <code>false</code> otherwise.
- (BOOL)handleURL:(NSURL * _Nonnull)url SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol DTApplePayDelegate;
@class NSString;
@class PKPaymentRequest;

/// Configuration object for Apple Pay transactions.
SWIFT_CLASS_NAMED("ApplePayConfig")
@interface DTApplePayConfig : NSObject <NSCopying>
/// Delegate object for callbacks during Apple Pay authorization
@property (nonatomic, weak) id <DTApplePayDelegate> _Nullable delegate;
/// Use this label to configure the final summary of the purchase. The default
/// label is “Total”, but you can also replace it with the name of your shop.
/// The string will then read: PAY YOURSHOP: XX.XX
@property (nonatomic, copy) NSString * _Nullable finalSummaryItemLabel;
/// The request object for further configuration of Apple Pay. Please refer to
/// the official Apple Pay documentation for more information.
@property (nonatomic, readonly, strong) PKPaymentRequest * _Nonnull request;
/// Shows Apple Pay additionally on the saved payment method selection screen.
@property (nonatomic) BOOL showApplePayAsSavedPaymentMethod;
/// Use this option to show Apple Pay as a payment button instead of a
/// listed payment method.
@property (nonatomic) BOOL showLargeButton;
/// Use this option to hide and disable Apple Pay when the user hasn’t yet set up
/// a supported card with Apple Pay. By default Apple Pay is shown in any case.
@property (nonatomic) BOOL existingCardRequired;
/// Use this method to determine the availability of Apple Pay for the specified parameters on a given device. Note that while the SDK automatically manages the visibility
/// of Apple Pay and hides it when not available, if Apple Pay is the only payment option and it is not available, an error will be thrown.
/// This method is commonly employed in scenarios where Apple Pay is presented as a fast checkout option on a product page or when the merchant displays
/// the list of available payment methods.
/// \param supportedNetworks Supported card acquirers.
///
/// \param existingCardRequired Determines whether Apple Pay should be exclusively available when at least one supported card is already set up by the user.
///
///
/// returns:
/// True if Apple Pay is available on the device, false if it is unavailable.
+ (BOOL)hasApplePayWithSupportedNetworks:(NSArray<PKPaymentNetwork> * _Nonnull)supportedNetworks existingCardRequired:(BOOL)existingCardRequired SWIFT_WARN_UNUSED_RESULT;
/// Creates a new Apple Pay configuration object with an Apple Pay country code.
/// If no countryCode is specified, the SDK will set Switzerland as the country code.
/// \param applePayMerchantId The merchant identifier (Merchant ID) at Apple,
/// which you created together with the CSR file provided by Datatrans.
///
/// \param supportedNetworks Supported card acquirers.
///
/// \param countryCode Apple Pay country code
///
- (nonnull instancetype)initWithApplePayMerchantId:(NSString * _Nonnull)applePayMerchantId supportedNetworks:(NSArray<PKPaymentNetwork> * _Nonnull)supportedNetworks countryCode:(NSString * _Nonnull)countryCode OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nonnull instancetype)initWithApplePayMerchantId:(NSString * _Nonnull)applePayMerchantId supportedNetworks:(NSArray<PKPaymentNetwork> * _Nonnull)supportedNetworks;
/// :nodoc:
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSCoder;

/// This class includes the Datatrans error name
SWIFT_CLASS_NAMED("BackendError")
@interface DTBackendError : NSError
/// Datatrans error name
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// :nodoc:
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithDomain:(NSString * _Nonnull)domain code:(NSInteger)code userInfo:(NSDictionary<NSString *, id> * _Nullable)dict OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


@class NSNumber;

/// Configuration object for Boncard transactions.
SWIFT_CLASS_NAMED("BoncardConfig")
@interface DTBoncardConfig : NSObject <NSCopying>
/// Creates a new Boncard configuration object.
/// This initializer is for use from Objective-C only. Instead of <code>[BoncardType]</code>, it
/// takes <code>[NSNumber]</code> containing <code>rawValue</code>s of <code>BoncardType</code>.
/// Example:
/// <code>[[DTBoncardConfig alloc] initWithBoncardTypes:@[@(DTBoncardTypeGiftCard), @(DTBoncardTypeBoncard)]];</code>
/// \param boncardTypesObjc The types of Boncard (and their order) to
/// display in the payment method selection for the <code>PaymentMethodType.Boncard</code>
/// payment method type.
///
- (nonnull instancetype)initWithBoncardTypes:(NSArray<NSNumber *> * _Nonnull)boncardTypesObjc;
/// :nodoc:
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// The different types of Boncard, for determining how the <code>PaymentMethodType.Boncard</code>
/// payment method type is displayed in the payment selection.
typedef SWIFT_ENUM_NAMED(NSInteger, DTBoncardType, "BoncardType", open) {
/// Displays as “Gift card” with a generic gift card icon
  DTBoncardTypeGiftCard = 0,
/// Displays as “Boncard”
  DTBoncardTypeBoncard = 1,
/// Displays as “Lunch-Check” with the Lunch-Check logo
  DTBoncardTypeLunchCheck = 2,
/// Displays as “Voucher” with the SBB Voucher logo
  DTBoncardTypeSbbVoucher = 3,
};

enum DTPaymentMethodType : NSInteger;

/// This is the base class for payment methods. It contains a type to identify the
/// payment method, e.g. Visa or Mastercard.
SWIFT_CLASS_NAMED("PaymentMethod")
@interface DTPaymentMethod : NSObject <NSCoding, NSCopying>
/// Payment method type, e.g. Visa
@property (nonatomic, readonly) enum DTPaymentMethodType type;
/// This init method initializes a <code>PaymentMethod</code> object with the
/// payment method type.
/// \param type Payment method type, e.g. Visa
///
- (nonnull instancetype)initWithType:(enum DTPaymentMethodType)type OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class DTCardExpiryDate;

/// Use this class to process raw card data for payments. You should use
/// this class if your app takes over the user interface for the card input fields.
SWIFT_CLASS_NAMED("Card")
@interface DTCard : DTPaymentMethod
/// Card number
@property (nonatomic, copy) NSString * _Nonnull number;
/// Expiry date
@property (nonatomic, strong) DTCardExpiryDate * _Nonnull expiryDate;
/// Card security code - nil if the card does not have a card security code.
@property (nonatomic, copy) NSString * _Nullable cvv;
/// Cardholder’s name (as written on the card)
@property (nonatomic, copy) NSString * _Nullable cardholder;
/// Use this to initialize a card object with the card data.
/// \param type Card type, e.g. Visa or Mastercard
///
/// \param number Card number
///
/// \param expiryDate Expiry date
///
/// \param cvv Card security code - nil if the card does not have a card security code.
///
/// \param cardholder Cardholder’s name (as written on the card)
///
- (nonnull instancetype)initWithType:(enum DTPaymentMethodType)type number:(NSString * _Nonnull)number expiryDate:(DTCardExpiryDate * _Nonnull)expiryDate cvv:(NSString * _Nullable)cvv cardholder:(NSString * _Nullable)cardholder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithType:(enum DTPaymentMethodType)type SWIFT_UNAVAILABLE;
@end


/// Class to be used to represent the card expiry date (month and year).
SWIFT_CLASS_NAMED("CardExpiryDate")
@interface DTCardExpiryDate : NSObject <NSCopying>
/// Formats the month to a two digit string.
@property (nonatomic, readonly, copy) NSString * _Nonnull formattedMonth;
/// Formats the year to a two digit string.
@property (nonatomic, readonly, copy) NSString * _Nonnull formattedYear;
/// Card expiry month, [1, 12], e.g. 1 for January or 12 for December
@property (nonatomic) NSInteger month;
/// Card expiry year, 2 or 4 digits, e.g. 30 or 2030
@property (nonatomic) NSInteger year;
/// Initializes the card expiry date with the given month and year.
/// \param month Card expiry month, [1, 12], e.g. 1 for January or 12 for December
///
/// \param year Card expiry year, 2 or 4 digits, e.g. 30 or 2030
///
- (nonnull instancetype)initWithMonth:(NSInteger)month year:(NSInteger)year OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// :nodoc:
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Use this to choose which label to display for the card option
/// in the payment method selection.
typedef SWIFT_ENUM_NAMED(NSInteger, DTCardLabelType, "CardLabelType", open) {
/// Displays as “Credit or debit card”.
  DTCardLabelTypeCreditOrDebitCard = 0,
/// Displays as “Credit card”.
  DTCardLabelTypeCreditCard = 1,
/// Displays as “Debit card”.
  DTCardLabelTypeDebitCard = 2,
};




/// Callback invoked by the SDK when the custom initial loader must be dismissed.
/// important:
/// The SDK does not invoke the callback when nothing has to be shown throughout the process. Make sure you dismiss the loading animation at the end of the transaction if the SDK hasn’t done so already.
SWIFT_PROTOCOL_NAMED("InitialLoaderDelegate")
@protocol DTInitialLoaderDelegate
/// Invoked when SDK content needs to be presented. The app must dismiss/hide its custom loading animation immediately. For the remainder of the process the SDK’s loading animation is used.
- (void)dismissLoader;
@end



/// This class represents a previously tokenized card used in the CVV-only tokenization/verification flow.
SWIFT_CLASS_NAMED("PCIPCVVOnlyCard")
@interface DTPCIPCVVOnlyCard : NSObject
/// The masked card number, e.g. “489537xxxxxx6287”
@property (nonatomic, copy) NSString * _Nonnull maskedCardNumber;
/// Expiry date
@property (nonatomic, strong) DTCardExpiryDate * _Nonnull expiryDate;
/// Use this to initialize a CVV only object.
/// \param type e.g. Visa or Mastercard
///
/// \param maskedCardNumber The masked card number, e.g. “489537xxxxxx6287”
///
/// \param expiryDate Expiry date
///
- (nonnull instancetype)initWithType:(enum DTPaymentMethodType)type maskedCardNumber:(NSString * _Nonnull)maskedCardNumber expiryDate:(DTCardExpiryDate * _Nonnull)expiryDate OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// This class represents a (credit or debit) card which was used for PCI Proxy tokenization.
SWIFT_CLASS_NAMED("PCIPCardInfo")
@interface DTPCIPCardInfo : NSObject
/// The brand of the card, e.g. “VISA”
@property (nonatomic, readonly, copy) NSString * _Nullable brand;
/// The country of the card, e.g. “US”
@property (nonatomic, readonly, copy) NSString * _Nullable countryCode;
/// The issuer of the card, e.g. “U.S. REGION”
@property (nonatomic, readonly, copy) NSString * _Nullable issuer;
/// The masked card number, e.g. “489537xxxxxx6287”
@property (nonatomic, readonly, copy) NSString * _Nonnull maskedCardNumber;
/// Expiry date
@property (nonatomic, readonly, strong) DTCardExpiryDate * _Nonnull expiryDate;
/// The type of the card, e.g. “debit”
@property (nonatomic, readonly, copy) NSString * _Nullable type;
/// The usage of the card, e.g. “consumer”
@property (nonatomic, readonly, copy) NSString * _Nullable usage;
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// This class is used to add cardholder info.
SWIFT_CLASS_NAMED("PCIPCardholder")
@interface DTPCIPCardholder : NSObject
/// Cardholder email address.
@property (nonatomic, copy) NSString * _Nullable emailAddress;
/// Cardholder phone number.
@property (nonatomic, copy) NSString * _Nullable phoneNumber;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol DTPCIPTokenizationDelegate;
@class DTPCIPTokenizationOptions;
@class DTThemeConfiguration;
@class UIViewController;

/// Use this class to start a PCI Proxy tokenization.
/// After the tokenization has been completed - regardless if
/// successful or not - <code>delegate</code> will be called with some basic
/// information about the success or failure.
/// warning:
/// Only use this API if you are a PCI Proxy customer. Use <code>Transaction</code>
/// if you want to register a saved payment method.
SWIFT_CLASS_NAMED("PCIPTokenization")
@interface DTPCIPTokenization : NSObject
/// This delegate will be notified after a tokenization has been finished,
/// successfully or not.
@property (nonatomic, weak) id <DTPCIPTokenizationDelegate> _Nullable delegate;
/// The available options for how a tokenization is handled by the mobile SDK.
@property (nonatomic, strong) DTPCIPTokenizationOptions * _Nonnull options;
/// The theme to be used by the SDK.
@property (nonatomic, strong) DTThemeConfiguration * _Nonnull theme;
/// Use this init method if you use your own UI and already have a <code>Card</code> instance with the
/// card data to be tokenized. After this class is initialized, you should define its <code>delegate</code>,
/// the <code>options</code> properties and a <code>theme</code> if desired.
/// \param merchantId Your merchantId.
///
/// \param card Card object to tokenize.
///
- (nonnull instancetype)initWithMerchantId:(NSString * _Nonnull)merchantId card:(DTCard * _Nonnull)card OBJC_DESIGNATED_INITIALIZER;
/// Use this init method to tokenize the CVV of an already tokenized card. After this
/// class is initialized, you should define its <code>delegate</code>, the <code>options</code> properties
/// and a <code>theme</code> if desired.
/// \param merchantId Your merchantId.
///
/// \param cvvOnlyCard Previously tokenized card for which the CVV should be entered.
///
- (nonnull instancetype)initWithMerchantId:(NSString * _Nonnull)merchantId cvvOnlyCard:(DTPCIPCVVOnlyCard * _Nonnull)cvvOnlyCard OBJC_DESIGNATED_INITIALIZER;
/// Use this init method to allow the user to enter the  card data to be tokenized. After this
/// class is initialized, you should define its <code>delegate</code>, the <code>options</code> properties
/// and a <code>theme</code> if desired.
/// This initializer is for use from Objective-C only. Instead of <code>[PaymentMethodType]</code>, it
/// takes <code>[NSNumber]</code> containing <code>rawValue</code>s of <code>PaymentMethodType</code>.
/// Example:
/// <code>[[DTPCIPTokenization alloc] initWithMerchantId:@"..." paymentMethodTypes:@[@(DTPaymentMethodTypeVisa), @(DTPaymentMethodTypeMasterCard)]];</code>
/// \param merchantId Your merchantId.
///
/// \param paymentMethodTypesObjc The allowed credit or debit card types.
///
- (nonnull instancetype)initWithMerchantId:(NSString * _Nonnull)merchantId paymentMethodTypes:(NSArray<NSNumber *> * _Nonnull)paymentMethodTypesObjc;
/// Starts the SDK and displays any needed user interface using the provided
/// <code>presentingController</code>. Note that a tokenization can only
/// be started once. For SwiftUI, use <code>View.datatrans(startWithPCIPTokenization:)</code> instead.
/// \param presentingController <code>UIViewController</code>
/// used to present the user interface during an on-going tokenization.
///
- (void)startWithPresentingController:(UIViewController * _Nonnull)presentingController;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class DTPCIPTokenizationSuccess;
@class DTPCIPTokenizationError;

/// Implement PCIPTokenizationDelegate to be notified when a tokenization
/// ends. PCIPTokenizationDelegate will notify you about the success,
/// error or cancel state of the processed tokenization.
SWIFT_PROTOCOL_NAMED("PCIPTokenizationDelegate")
@protocol DTPCIPTokenizationDelegate
/// This is called after a tokenization has been successfully
/// completed. This callback provides details about the tokenization.
/// \param tokenization The object containing the information
/// of the completed tokenization.
///
/// \param result The result object containing the tokenization ID and
/// other useful information, e.g. about the card.
///
- (void)tokenizationDidFinish:(DTPCIPTokenization * _Nonnull)tokenization result:(DTPCIPTokenizationSuccess * _Nonnull)result;
/// This is called after a tokenization fails or encounters an error.
/// Keep in mind that the SDK shows the error to the user before
/// this is invoked. Therefore, this callback can be used to cancel
/// any on-going process involving the tokenization.
/// You may also use the error details provided here and display it
/// the way you want when suppressing the error message within
/// the <code>PCIPTokenizationOptions</code>.
/// \param tokenization The object containing the information
/// of the failed tokenization.
///
/// \param error The error that occurred.
///
- (void)tokenizationDidFail:(DTPCIPTokenization * _Nonnull)tokenization error:(DTPCIPTokenizationError * _Nonnull)error;
@optional
/// This is called after a tokenization has been cancelled. This callback
/// can be used to cancel any on-going process involving the tokenization.
/// \param tokenization The object containing the
/// information of the cancelled tokenization.
///
- (void)tokenizationDidCancel:(DTPCIPTokenization * _Nonnull)tokenization;
@end


/// This class includes the error message of a failed tokenization.
SWIFT_CLASS_NAMED("PCIPTokenizationError")
@interface DTPCIPTokenizationError : NSError
/// The error code for technical errors.
/// Use this constant to compare it to a <code>PCIPTokenizationError</code>’s <code>code</code>.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger technical;)
+ (NSInteger)technical SWIFT_WARN_UNUSED_RESULT;
/// The error code for validation errors.
/// Use this constant to compare it to a <code>PCIPTokenizationError</code>’s <code>code</code>.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger validation;)
+ (NSInteger)validation SWIFT_WARN_UNUSED_RESULT;
/// The BackendError that contains the Datatrans error name
@property (nonatomic, readonly, strong) DTBackendError * _Nullable backendError;
- (nonnull instancetype)initWithDomain:(NSString * _Nonnull)domain code:(NSInteger)code userInfo:(NSDictionary<NSString *, id> * _Nullable)dict OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// This class can be used to specify miscellaneous options related to the tokenization.
SWIFT_CLASS_NAMED("PCIPTokenizationOptions")
@interface DTPCIPTokenizationOptions : NSObject
/// Use this setting to change the UI language. If this is not
/// specified, the default language determined by the system will be used.
/// The supported values are <code>en</code>, <code>da</code>, <code>de</code>, <code>es</code>, <code>fi</code>, <code>fr</code>, <code>it</code>,  <code>nl</code>,<code>no</code>, <code>pt</code>, <code>sv</code> and <code>nil</code>.
@property (nonatomic, copy) NSString * _Nullable language;
/// Use this setting to display or hide critical errors.
@property (nonatomic) BOOL suppressCriticalErrorDialog;
/// Use this setting to switch from production to sandbox. If not specified,
/// the SDK will call the Datatrans production environment.
@property (nonatomic) BOOL testing;
/// Whether secure connections to Datatrans servers require a certificate
/// chain signed with a specific CA private key. The device’s trust settings
/// are explicitly ignored, i.e. custom installed/white-listed certificates
/// and/or CAs will not work.
/// Please be advised that enabling this option will break your app in many
/// corporate networks with anti-malware/-theft/-espionage SSL proxying.
@property (nonatomic) BOOL useCertificatePinning;
/// Use this setting to pass cardholder information for network tokens.
/// important:
/// For AMEX network tokens, either the phone number or email
/// address is mandatory. The phone number must be given in international format
/// with a leading plus sign (+) followed by country code.
@property (nonatomic, strong) DTPCIPCardholder * _Nonnull cardholder;
/// Use this option when no card data is entered in our SDK and you want to show your own loading animation during the SDK’s initial network requests.
/// important:
/// Your loader must be visible before starting the SDK. Be aware that the SDK blocks user input. Your loading screen can not have a cancel button or give the impression that users can still interact with the UI.
@property (nonatomic, weak) id <DTInitialLoaderDelegate> _Nullable customInitialLoaderDelegate;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// This class aggregates the results of a successful PCI Proxy tokenization.
SWIFT_CLASS_NAMED("PCIPTokenizationSuccess")
@interface DTPCIPTokenizationSuccess : NSObject
/// Object representing the (credit or debit) card which was used
/// for this PCI Proxy tokenization.
@property (nonatomic, readonly, strong) DTPCIPCardInfo * _Nonnull cardInfo;
/// The payment method used for this PCI Proxy tokenization.
@property (nonatomic, readonly) enum DTPaymentMethodType paymentMethodType;
/// The resulting tokenizationId.
@property (nonatomic, readonly, copy) NSString * _Nonnull tokenizationId;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// The payment method used during the transaction.
typedef SWIFT_ENUM_NAMED(NSInteger, DTPaymentMethodType, "PaymentMethodType", open) {
/// Visa payment method
  DTPaymentMethodTypeVisa = 0,
/// MasterCard payment method
  DTPaymentMethodTypeMasterCard = 1,
/// Diners Club payment method
  DTPaymentMethodTypeDinersClub = 2,
/// American Express payment method
  DTPaymentMethodTypeAmericanExpress = 3,
/// JCB payment method
  DTPaymentMethodTypeJCB = 4,
/// UATP payment method
  DTPaymentMethodTypeUATP = 5,
/// Discover payment method
  DTPaymentMethodTypeDiscover = 6,
/// SUPERCARD payment method
  DTPaymentMethodTypeSupercard = 7,
/// PostFinance Card payment method
  DTPaymentMethodTypePostFinanceCard = 8,
/// PostFinance E-Finance payment method
  DTPaymentMethodTypePostFinanceEFinance = 9,
/// PayPal payment method
  DTPaymentMethodTypePayPal = 10,
/// Swisscom Pay payment method
  DTPaymentMethodTypeEasypay = 11,
/// SEPA (ELV) payment method
  DTPaymentMethodTypeSEPA = 12,
/// SwissBilling payment method
  DTPaymentMethodTypeSwissBilling = 13,
/// Twint payment method
  DTPaymentMethodTypeTwint = 14,
/// Apple Pay payment method
  DTPaymentMethodTypeApplePay = 15,
/// Reka payment method
  DTPaymentMethodTypeReka = 16,
/// CembraPay payment method
  DTPaymentMethodTypeCembraPay = 17,
/// SwissPass payment method
  DTPaymentMethodTypeSwissPass = 18,
/// Powerpay payment method
  DTPaymentMethodTypePowerpay = 19,
/// Paycard payment method
  DTPaymentMethodTypePaycard = 20,
/// Paysafecard payment method
  DTPaymentMethodTypePaysafecard = 21,
/// Gift card / Boncard / Lunch-Check payment method
  DTPaymentMethodTypeBoncard = 22,
/// Elo card payment method
  DTPaymentMethodTypeElo = 23,
/// Hipercard payment method
  DTPaymentMethodTypeHipercard = 24,
/// Klarna payment method
  DTPaymentMethodTypeKlarna = 25,
/// Dankort payment method
  DTPaymentMethodTypeDankort = 26,
/// Swish payment method
  DTPaymentMethodTypeSwish = 27,
/// Vipps payment method
  DTPaymentMethodTypeVipps = 28,
/// MobilePay payment method
  DTPaymentMethodTypeMobilePay = 29,
/// Maestro payment method
  DTPaymentMethodTypeMaestro = 30,
/// China Union Pay payment method
  DTPaymentMethodTypeChinaUnionPay = 31,
/// SBB Half Fare Travelcard PLUS payment method
  DTPaymentMethodTypeHalfFarePlus = 32,
/// iDEAL payment method
  DTPaymentMethodTypeIDEAL = 33,
/// Postfinance Pay
  DTPaymentMethodTypePostFinancePay = 34,
};


/// Use this class to map the payment method identifiers from Datatrans to the <code>PaymentMethodType</code>.
SWIFT_CLASS_NAMED("PaymentMethodTypeMapper")
@interface DTPaymentMethodTypeMapper : NSObject
/// This function returns the <code>PaymentMethodType</code> based on the Datatrans
/// payment method identifier.
/// This is for use from Objective-C only. The returned <code>NSNumber</code> contains the
/// <code>rawValue</code> of a <code>DTPaymentMethodType</code>.
/// \param identifier The payment method identifier from Datatrans
///
///
/// returns:
/// The payment method type, e.g. Visa, or nil if <code>identifier</code> is invalid
+ (NSNumber * _Nullable)toTypeWithIdentifier:(NSString * _Nonnull)identifier SWIFT_WARN_UNUSED_RESULT;
/// This function returns the payment method identifier based on the
/// <code>PaymentMethodType</code>.
/// \param type The payment method type, e.g. Visa
///
///
/// returns:
/// The payment method identifier
+ (NSString * _Nonnull)toIdentifierWithType:(enum DTPaymentMethodType)type SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSData;

/// This is the base class to save a payment method and use it to process recurring payments
/// or fast checkouts.
/// This class is sufficient for some payment methods (e.g. Twint). More complex payment
/// methods require you to specify additional details in their <code>SavedPaymentMethod</code>
/// subclass (e.g. card payments, PostFinance, etc.).
/// Please refer to this list to see if you need to use one of the subclasses for your payments:
/// <ul>
///   <li>
///     Easy payment methods: Swisscom Pay, SEPA (ELV), Twint,
///     Apple Pay, CembraPay, SwissPass, Powerpay Invoice
///   </li>
///   <li>
///     Complex payment methods (requiring a <code>SavedPaymentMethod</code> subclass): Card payments,
///     PayPal, PostFinance, Reka, Boncard
///   </li>
/// </ul>
/// Please refer to the Datatrans documentation to see if you can register a payment method
/// during payment or require a dedicated registration.
SWIFT_CLASS_NAMED("SavedPaymentMethod")
@interface DTSavedPaymentMethod : DTPaymentMethod
/// The alias that can be used to process recurring payments or fast checkouts.
@property (nonatomic, copy) NSString * _Nonnull alias;
/// A human readable title.
@property (nonatomic, readonly, copy) NSString * _Nonnull displayTitle;
/// For VoiceOver this title is used instead of displayTitle.
@property (nonatomic, readonly, copy) NSString * _Nonnull accessibilityTitle;
/// This init method has to be used to initialize a saved payment method.
/// \param type Payment method type, e.g. PayPal or Twint
///
/// \param alias The alias that can be used to process recurring payments or fast checkouts.
///
- (nonnull instancetype)initWithType:(enum DTPaymentMethodType)type alias:(NSString * _Nonnull)alias OBJC_DESIGNATED_INITIALIZER;
/// Creates a <code>SavedPaymentMethod</code> from a JSON string.
/// Use this method to deserialize a saved payment method. It takes a JSON string that has been
/// created with <code>toJson()</code>.
/// The JSON string is compatible with the Android version of the Datatrans SDK.
/// \param jsonString The JSON string representation
///
///
/// returns:
/// The decoded <code>SavedPaymentMethod</code> or one of its subclasses, if successful,
/// nil if <code>jsonString</code> is invalid.
+ (DTSavedPaymentMethod * _Nullable)createWithJsonString:(NSString * _Nonnull)jsonString SWIFT_WARN_UNUSED_RESULT;
/// Creates a <code>SavedPaymentMethod</code> from data encoded by the old payment library.
/// \param legacySavedPaymentMethodData Data encoded by
/// <code>DTRecurringPaymentMethod.data()</code>, <code>DTCreditCard.data()</code>,
/// <code>DTPostFinanceCard.data()</code>, <code>DTReka.data()</code>, <code>DTPayPal.data()</code> or <code>DTELV.data()</code>.
///
///
/// returns:
/// The decoded <code>SavedPaymentMethod</code> or one of its subclasses, if successful,
/// nil if <code>legacySavedPaymentMethodData</code> is invalid.
+ (DTSavedPaymentMethod * _Nullable)createWithLegacySavedPaymentMethodData:(NSData * _Nonnull)legacySavedPaymentMethodData SWIFT_WARN_UNUSED_RESULT;
/// Returns a JSON string representation of this saved payment method object.
/// Use this method to serialize a saved payment method. The resulting JSON string can be deserialized with
/// <code>create(jsonString:)</code>.
/// The JSON string is compatible with the Android version of the Datatrans SDK.
///
/// returns:
/// The JSON string representation
- (NSString * _Nonnull)toJson SWIFT_WARN_UNUSED_RESULT;
/// This function checks if the saved payment method is valid.
/// When e.g. called on a <code>SavedCard</code> it tells you if the expiration date is in the future or not.
- (BOOL)isValid SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithType:(enum DTPaymentMethodType)type SWIFT_UNAVAILABLE;
@end

@class DTSavedCard;

/// This class contains saved Apple Pay payment method details.
/// Like any other <code>SavedPaymentMethod</code> subclass, it can be used to initiate
/// follow-up payments with the same method. Note: Using this class will still present
/// the Apple Pay sheet to the user when they are in session.
/// A <code>SavedApplePay</code> object can be created by successfully completing an Apple Pay
/// payment or with a dedicated registration.
SWIFT_CLASS_NAMED("SavedApplePay")
@interface DTSavedApplePay : DTSavedPaymentMethod
/// The Apple Pay device token associated with the previous transaction.
/// <em>Important:</em> This data is strictly for use in merchant-initiated follow-up transactions (MIT)
/// where the customer is not present during payment. Do not display any information such as
/// <code>maskedCardNumber</code> or <code>cardExpiryDate</code> to users. These details are derived from
/// the device token and do not represent the actual card information. For details about the real
/// card, refer to <code>last4</code>.
@property (nonatomic, strong) DTSavedCard * _Nonnull token;
/// The last 4 digits of the real card number used in the transaction. Note: This information may
/// not be available for all card types.
@property (nonatomic, copy) NSString * _Nullable last4;
/// A human readable title.
@property (nonatomic, readonly, copy) NSString * _Nonnull displayTitle;
/// For VoiceOver this title is used instead of displayTitle.
@property (nonatomic, readonly, copy) NSString * _Nonnull accessibilityTitle;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)initWithType:(enum DTPaymentMethodType)type alias:(NSString * _Nonnull)alias SWIFT_UNAVAILABLE;
@end


/// This class contains saved Boncard payment method details.
/// Just like any other <code>SavedPaymentMethod</code> subclass, this class can be used
/// to finalize a payment without user interaction or to display a selection of saved
/// payment methods to the user for fast checkouts.
/// A <code>SavedBoncard</code> can be created by successfully completing a Boncard payment or
/// with a dedicated registration.
SWIFT_CLASS_NAMED("SavedBoncard")
@interface DTSavedBoncard : DTSavedPaymentMethod
/// The specific subtype of card, which affects the title and logo that is displayed for the card.
@property (nonatomic, readonly) enum DTBoncardType boncardType;
/// The masked card number you can use to display that specific card in your app.
@property (nonatomic, readonly, copy) NSString * _Nullable maskedCardNumber;
/// This init method has to be used to initialize a saved Boncard payment method.
/// \param alias Alias for a Boncard
///
/// \param maskedCardNumber The masked card number you can use to display that
/// specific card in your app.
///
/// \param boncardType The specific subtype of card, which affects the title and logo
/// that is displayed for the card.
///
- (nonnull instancetype)initWithAlias:(NSString * _Nonnull)alias maskedCardNumber:(NSString * _Nullable)maskedCardNumber boncardType:(enum DTBoncardType)boncardType OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithType:(enum DTPaymentMethodType)type alias:(NSString * _Nonnull)alias SWIFT_UNAVAILABLE;
@end


/// This class contains saved credit or debit card payment method details.
/// Just like any other <code>SavedPaymentMethod</code> subclass, this class can be used
/// to finalize a payment without user interaction or to display a selection of saved
/// payment methods to the user for fast checkouts.
/// A <code>SavedCard</code> can be created by successfully completing a card payment or
/// with a dedicated registration.
SWIFT_CLASS_NAMED("SavedCard")
@interface DTSavedCard : DTSavedPaymentMethod
/// Expiry date
@property (nonatomic, readonly, strong) DTCardExpiryDate * _Nullable cardExpiryDate;
/// The masked card number you can use to display that specific card in your app.
/// The masked card number shows the first 6 digits and the last 4 digits of the card,
/// e.g. 432930xxxxxx6095.
@property (nonatomic, readonly, copy) NSString * _Nullable maskedCardNumber;
/// Cardholder’s name
@property (nonatomic, copy) NSString * _Nullable cardholder;
/// Initializes a <code>SavedCard</code> object with the given card data.
/// \param type Payment method type, e.g. Visa
///
/// \param alias This is the alias for the card, also known as token.
/// This can be used to debit the card without further customer interaction.
///
/// \param cardExpiryDate Expiry date
///
/// \param maskedCardNumber The masked card number you can use to display
/// that specific card in your app. The masked card number shows the first 6
/// digits and the last 4 digits of the card, e.g. 432930xxxxxx6095.
///
/// \param cardholder Cardholder’s name
///
- (nonnull instancetype)initWithType:(enum DTPaymentMethodType)type alias:(NSString * _Nonnull)alias cardExpiryDate:(DTCardExpiryDate * _Nullable)cardExpiryDate maskedCardNumber:(NSString * _Nullable)maskedCardNumber cardholder:(NSString * _Nullable)cardholder OBJC_DESIGNATED_INITIALIZER;
/// Checks if the expiration date is in the future or not.
- (BOOL)isValid SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// :nodoc:
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithType:(enum DTPaymentMethodType)type alias:(NSString * _Nonnull)alias SWIFT_UNAVAILABLE;
@end


/// This class contains saved PayPal payment method details.
/// Just like any other <code>SavedPaymentMethod</code> subclass, this class can be used
/// to finalize a payment without user interaction or to display a selection of saved
/// payment methods to the user for fast checkouts.
/// A <code>SavedPayPal</code> can be created by successfully completing a PayPal payment or
/// with a dedicated registration.
SWIFT_CLASS_NAMED("SavedPayPal")
@interface DTSavedPayPal : DTSavedPaymentMethod
/// PayPal e-mail address. This will be used for displaying purposes.
@property (nonatomic, copy) NSString * _Nullable payPalEmail;
/// This init method has to be used to initialize a saved PayPal payment method.
/// \param alias Alias for a PayPal account.
///
/// \param payPalEmail PayPal e-mail address. This will be used for displaying purposes.
///
- (nonnull instancetype)initWithAlias:(NSString * _Nonnull)alias payPalEmail:(NSString * _Nullable)payPalEmail OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithType:(enum DTPaymentMethodType)type alias:(NSString * _Nonnull)alias SWIFT_UNAVAILABLE;
@end



/// This class contains saved PostFinance Card payment method details.
/// Just like any other <code>SavedPaymentMethod</code> subclass, this class can be used
/// to finalize a payment without user interaction or to display a selection of saved
/// payment methods to the user for fast checkouts.
/// A <code>SavedPostFinanceCard</code> can be created by successfully completing a
/// PostFinance Card payment or with a dedicated registration.
SWIFT_CLASS_NAMED("SavedPostFinanceCard")
@interface DTSavedPostFinanceCard : DTSavedCard
/// This init method has to be used to initialize a saved PostFinance Card payment method.
/// \param alias Alias for a PostFinance Card.
///
/// \param cardExpiryDate Expiry date
///
/// \param maskedCardNumber The masked card number you can use to display
/// that specific card in your app. The masked card number shows the last 4
/// digits of the card, e.g. **** 1234.
///
/// \param cardholder Cardholder’s name
///
- (nonnull instancetype)initWithAlias:(NSString * _Nonnull)alias cardExpiryDate:(DTCardExpiryDate * _Nullable)cardExpiryDate maskedCardNumber:(NSString * _Nullable)maskedCardNumber cardholder:(NSString * _Nullable)cardholder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithType:(enum DTPaymentMethodType)type alias:(NSString * _Nonnull)alias cardExpiryDate:(DTCardExpiryDate * _Nullable)cardExpiryDate maskedCardNumber:(NSString * _Nullable)maskedCardNumber cardholder:(NSString * _Nullable)cardholder SWIFT_UNAVAILABLE;
@end


/// This class contains saved PostFinance Pay payment method details.
/// Like any other <code>SavedPaymentMethod</code> subclass, this class can be used
/// to pay with a previously registered payment method or to present a list of saved
/// payment methods to the user for fast checkouts.
/// A <code>SavedPostFinancePay</code> object can be created either by successfully completing
/// a PostFinance Pay payment or through a dedicated registration process.
SWIFT_CLASS_NAMED("SavedPostFinancePay")
@interface DTSavedPostFinancePay : DTSavedPaymentMethod
/// Masked PostFinance account number (IBAN). This will be used for displaying purposes.
@property (nonatomic, copy) NSString * _Nullable maskedAccountNumber;
/// A human readable title.
@property (nonatomic, readonly, copy) NSString * _Nonnull displayTitle;
/// Initializes a <code>SavedPostFinancePay</code> object.
/// \param alias Alias for a PostFinance account.
///
/// \param maskedAccountNumber Masked PostFinance account number (IBAN). This will be used for displaying purposes.
///
- (nonnull instancetype)initWithAlias:(NSString * _Nonnull)alias maskedAccountNumber:(NSString * _Nullable)maskedAccountNumber OBJC_DESIGNATED_INITIALIZER;
/// :nodoc
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// :nodoc:
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithType:(enum DTPaymentMethodType)type alias:(NSString * _Nonnull)alias SWIFT_UNAVAILABLE;
@end


/// This class contains saved Reka card payment method details.
/// Just like any other <code>SavedPaymentMethod</code> subclass, this class can be used
/// to finalize a payment without user interaction or to display a selection of saved
/// payment methods to the user for fast checkouts.
/// A <code>SavedReka</code> can be created by successfully completing a Reka payment or
/// with a dedicated registration.
SWIFT_CLASS_NAMED("SavedReka")
@interface DTSavedReka : DTSavedCard
/// This init method has to be used to initialize a saved Reka payment method.
/// \param alias Alias for a Reka card.
///
/// \param cardExpiryDate Expiry date
///
/// \param maskedCardNumber The masked card number you can use to display
/// that specific card in your app. The masked card number shows the first 6
/// digits and the last 4 digits of the card, e.g. 123456xxxxxxxxx1234.
///
/// \param cardholder Cardholder’s name
///
- (nonnull instancetype)initWithAlias:(NSString * _Nonnull)alias cardExpiryDate:(DTCardExpiryDate * _Nonnull)cardExpiryDate maskedCardNumber:(NSString * _Nullable)maskedCardNumber cardholder:(NSString * _Nullable)cardholder;
/// :nodoc:
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithType:(enum DTPaymentMethodType)type alias:(NSString * _Nonnull)alias cardExpiryDate:(DTCardExpiryDate * _Nullable)cardExpiryDate maskedCardNumber:(NSString * _Nullable)maskedCardNumber cardholder:(NSString * _Nullable)cardholder OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// This class contains saved SEPA (ELV) payment method details.
/// Just like any other <code>SavedPaymentMethod</code> subclass, this class can be used
/// to finalize a payment without user interaction or to display a selection of saved
/// payment methods to the user for fast checkouts.
/// A <code>SavedSEPA</code> can be created by successfully completing a SEPA payment or
/// with a dedicated registration.
SWIFT_CLASS_NAMED("SavedSEPA")
@interface DTSavedSEPA : DTSavedPaymentMethod
/// A bank code (German: Bankleitzahl) is a unique identification code for a
/// particular bank. This is required for aliases created before April 15th 2015.
@property (nonatomic, readonly, copy) NSString * _Nullable bankCode;
/// Alias for SEPA (ELV).
@property (nonatomic, copy) NSString * _Nonnull alias;
/// This init method has to be used to initialize a saved SEPA (ELV) payment method.
/// \param alias Alias for SEPA (ELV).
///
- (nonnull instancetype)initWithAlias:(NSString * _Nonnull)alias;
/// This init method has to be used with SEPA (ELV) aliases created before April 15th 2015.
/// Please refer to <code>init(alias:)</code> for newer aliases.
/// \param alias Alias for SEPA (ELV). This value was returned for aliases created before April 15th 2015.
///
/// \param bankCode A bank code (German: Bankleitzahl) is a unique identification
/// code for a particular bank. This is required for aliases created before April 15th 2015.
///
- (nonnull instancetype)initWithAlias:(NSString * _Nonnull)alias bankCode:(NSString * _Nonnull)bankCode;
/// :nodoc:
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithType:(enum DTPaymentMethodType)type alias:(NSString * _Nonnull)alias OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@class UIColor;

/// This class gives you options to customize the theme of the library.
/// The library offers by default a theme for light and dark mode. If your app supports
/// both themes too, make sure to use <code>UIColor.init(dynamicProvider:)</code>
/// when creating custom themes.
/// We recommend you to start by customizing <code>linkColor</code> before anything else,
/// as this is often used as a fallback color.
SWIFT_CLASS_NAMED("ThemeConfiguration")
@interface DTThemeConfiguration : NSObject
/// Background color of the navigation bars. If this is not specified, the
/// navigation bars will be transparent.
@property (nonatomic, strong) UIColor * _Nullable barBackgroundColor;
/// Color of the buttons in the navigation bars. If this is not specified,
/// the color will be the color set in <code>linkColor</code>.
@property (nonatomic, strong) UIColor * _Nullable barLinkColor;
/// Color of the title within the navigation bars. If this is not specified,
/// the color will be the text color.
/// The text color is either white or black and cannot be customized.
@property (nonatomic, strong) UIColor * _Nullable barTitleColor;
/// Background color of large buttons, such as the ‘Pay’ button. If this is
/// not specified, the color will be the color set in <code>linkColor</code>.
@property (nonatomic, strong) UIColor * _Nullable buttonColor;
/// Text color of large buttons, such as the ‘Pay’ button. If this is not
/// specified, the color will be set to white.
@property (nonatomic, strong) UIColor * _Nullable buttonTextColor;
/// Color of text-only buttons or links and the text cursor. If this is not
/// specified, the color will be in a blue tone that fits the standard iOS design.
@property (nonatomic, strong) UIColor * _Nullable linkColor;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol DTTransactionDelegate;
@class DTTransactionOptions;

/// Use this class to start a transaction with a <code>mobileToken</code> that has previously been initialized
/// with a server-to-server init call.
/// This class is the main class to start any operation with the SDK.
/// After the transaction has been completed - regardless if successful or not - <code>delegate</code> will
/// be called with some basic information about the success or failure.
SWIFT_CLASS_NAMED("Transaction")
@interface DTTransaction : NSObject <DTErrorHandlerDelegate>
/// This delegate will be notified after a transaction has been finished,
/// successfully or not.
@property (nonatomic, weak) id <DTTransactionDelegate> _Nullable delegate;
/// The available options for how a transaction is handled by the mobile SDK.
@property (nonatomic, strong) DTTransactionOptions * _Nonnull options;
/// The theme to be used by the SDK.
@property (nonatomic, strong) DTThemeConfiguration * _Nonnull theme;
/// Use this init method to start the SDK with a mobile token obtained after a server-to-server init
/// call.
/// After this class is initialized, you should define its delegate, the <code>options</code> properties
/// and a <code>theme</code> if desired.
/// \param mobileToken The mobileToken that has previously
/// been initialized with a server-to-server init call.
///
- (nonnull instancetype)initWithMobileToken:(NSString * _Nonnull)mobileToken OBJC_DESIGNATED_INITIALIZER;
/// Use this init method to start the SDK with a mobile token and the provided <code>card</code> for the transaction.
/// For this to work, you can only send one payment method in your server-to-server init call.
/// Use this init method if you use your own UI fields for the card information.
/// \param mobileToken The mobileToken that has previously
/// been initialized with a server-to-server init call.
///
/// \param card Card object used for the transaction.
///
- (nonnull instancetype)initWithMobileToken:(NSString * _Nonnull)mobileToken card:(DTCard * _Nonnull)card OBJC_DESIGNATED_INITIALIZER;
/// Use this init method to start the SDK with a mobile token and a single saved payment method.
/// The payment will be started with this saved payment method.
/// \param mobileToken The mobileToken that has previously
/// been initialized with a server-to-server init call.
///
/// \param savedPaymentMethod The saved payment method to use for this payment.
///
- (nonnull instancetype)initWithMobileToken:(NSString * _Nonnull)mobileToken savedPaymentMethod:(DTSavedPaymentMethod * _Nonnull)savedPaymentMethod OBJC_DESIGNATED_INITIALIZER;
/// Use this init method to start the SDK with a mobile token and a selection of one or more saved
/// payment methods to display.
/// The user will then be able to tap on their desired saved payment method to finalize the payment.
/// \param mobileToken The mobileToken that has previously
/// been initialized with a server-to-server init call.
///
/// \param savedPaymentMethods Specify here the saved payment methods that are
/// available for selection to the user.
///
- (nonnull instancetype)initWithMobileToken:(NSString * _Nonnull)mobileToken savedPaymentMethods:(NSArray<DTSavedPaymentMethod *> * _Nonnull)savedPaymentMethods OBJC_DESIGNATED_INITIALIZER;
/// Starts the SDK and displays any needed user interface using the
/// provided <code>presentingController</code>. Note that a transaction
/// can only be started once. For SwiftUI, use <code>View.datatrans(startWithTransaction:)</code> instead.
/// \param presentingController <code>UIViewController</code>
/// used to present the user interface during an on-going transaction
///
- (void)startWithPresentingController:(UIViewController * _Nonnull)presentingController;
/// :nodoc:
- (void)didHandleError:(NSError * _Nonnull)error;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class DTTransactionSuccess;
@class DTTransactionError;

/// Implement TransactionDelegate to be notified when a transaction
/// ends. TransactionDelegate will notify you about the success, error
/// or cancel state of the processed transaction.
SWIFT_PROTOCOL_NAMED("TransactionDelegate")
@protocol DTTransactionDelegate
/// This is called after a transaction has been successfully
/// completed. This callback provides details about the transaction.
/// \param transaction The object containing the information
/// of the completed transaction.
///
/// \param result The object including the information related
/// to the transaction success.
///
- (void)transactionDidFinish:(DTTransaction * _Nonnull)transaction result:(DTTransactionSuccess * _Nonnull)result;
/// This is called after a transaction fails or encounters an error.
/// Keep in mind that the SDK shows the error to the user before
/// this is invoked. Therefore, this callback can be used to cancel
/// any on-going process involving the transaction.
/// You may also use the error details provided here and display it
/// the way you want when suppressing the error message within
/// the TransactionOptions.
/// \param transaction The object containing the information
/// of the failed transaction.
///
/// \param error The error that occurred.
///
- (void)transactionDidFail:(DTTransaction * _Nonnull)transaction error:(DTTransactionError * _Nonnull)error;
@optional
/// This is called after a transaction has been cancelled. This callback
/// can be used to cancel any on-going process involving the transaction.
/// Some payment methods - such as Twint that involves an app-switch -
/// also call this method when a payment error or decline occurs, to
/// prevent showing an error dialog twice, as an error is already
/// displayed in the payment application.
/// \param transaction The object containing the
/// information of the cancelled transaction.
///
- (void)transactionDidCancel:(DTTransaction * _Nonnull)transaction;
@end


/// This class includes the error message and other details of a transaction.
SWIFT_CLASS_NAMED("TransactionError")
@interface DTTransactionError : NSError
/// The error code for technical errors.
/// Use this constant to compare it to a <code>TransactionError</code>’s <code>code</code>.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger technical;)
+ (NSInteger)technical SWIFT_WARN_UNUSED_RESULT;
/// The error code for validation errors.
/// Use this constant to compare it to a <code>TransactionError</code>’s <code>code</code>.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger validation;)
+ (NSInteger)validation SWIFT_WARN_UNUSED_RESULT;
/// The error code for authentication errors.
/// Use this constant to compare it to a <code>TransactionError</code>’s <code>code</code>.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger authentication;)
+ (NSInteger)authentication SWIFT_WARN_UNUSED_RESULT;
/// The error code for authorization errors.
/// Use this constant to compare it to a <code>TransactionError</code>’s <code>code</code>.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger authorization;)
+ (NSInteger)authorization SWIFT_WARN_UNUSED_RESULT;
/// The payment method used during the transaction.
/// This is for use from Objective-C only. This property wraps the
/// <code>rawValue</code> of a <code>DTPaymentMethodType</code> in an <code>NSNumber</code>.
@property (nonatomic, readonly, strong) NSNumber * _Nullable paymentMethodType;
/// The identifier of the failed transaction
@property (nonatomic, readonly, copy) NSString * _Nullable transactionId;
/// The BackendError that contains the Datatrans error name
@property (nonatomic, readonly, strong) DTBackendError * _Nullable backendError;
/// :nodoc:
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithDomain:(NSString * _Nonnull)domain code:(NSInteger)code userInfo:(NSDictionary<NSString *, id> * _Nullable)dict OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

enum DTDCCShowMode : NSInteger;

/// This class can be used to specify miscellaneous options related to the transaction.
SWIFT_CLASS_NAMED("TransactionOptions")
@interface DTTransactionOptions : NSObject
/// Your unique URL scheme to be used by other apps (e.g. Twint)
/// to return to the merchant app.
@property (nonatomic, copy) NSString * _Nullable appCallbackScheme;
/// Specify the <code>ApplePayConfig</code> object here. This is mandatory
/// for Apple Pay transactions.
@property (nonatomic, strong) DTApplePayConfig * _Nullable applePayConfig;
/// Specify the <code>BoncardConfig</code> object here. This can be used to configure
/// how the <code>PaymentMethodType.Boncard</code> payment method type
/// should be displayed in the SDK. If not specified, a default value will be used.
@property (nonatomic, strong) DTBoncardConfig * _Nullable boncardConfig;
/// Use this setting to choose which label to display for the card option
/// in the payment method selection: “Credit card”, “Debit card”, or “Credit or debit card”.
/// The latter is used by default.
@property (nonatomic) enum DTCardLabelType cardLabelType;
/// Use this to change the name of the Klarna payment method, to
/// e.g. “Lastschrift”.
/// If not specified, the name is “Klarna”.
@property (nonatomic, copy) NSString * _Nullable customKlarnaPaymentMethodName;
/// :nodoc:
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nullable merchantProperties;
/// Use this setting to display or hide critical and transaction errors.
@property (nonatomic) BOOL suppressCriticalErrorDialog;
/// Use this setting to switch from production to sandbox. If not specified,
/// the SDK will call the Datatrans production environment.
@property (nonatomic) BOOL testing;
/// In case you use Twint and can’t list all Twint app schemes from “twint-issuer1” to “twint-issuer39”
/// under <code>LSApplicationQueriesSchemes</code>, use this setting to specify the highest one you do list.
/// The default value is 39. Listing “twint-extended” is always required to use Twint.
/// important:
/// Reducing <code>twintMaxIssuerNumber</code> has an adverse effect on the user experience.
@property (nonatomic) NSInteger twintMaxIssuerNumber;
/// Whether secure connections to datatrans servers require a certificate
/// chain signed with a specific CA private key. The device’s trust settings
/// are explicitly ignored, i.e. custom installed/white-listed certificates
/// and/or CAs will not work.
/// Please be advised that enabling this option will break your app in many
/// corporate networks with anti-malware/-theft/-espionage SSL proxying.
@property (nonatomic) BOOL useCertificatePinning;
/// Sometimes, apps display a loading animation before starting the SDK.
/// You can set the <code>customInitialLoaderDelegate</code> option if you
/// want to keep showing this animation instead of the SDK’s loader during
/// initial SDK network requests.
/// important:
/// Your loader must be visible before starting the SDK.
/// Be aware that the SDK blocks user input. Your loading screen can not have a
/// cancel button or give the impression that users can still interact with the UI.
@property (nonatomic, weak) id <DTInitialLoaderDelegate> _Nullable customInitialLoaderDelegate;
/// Option to control when the DCC (Dynamic Currency Conversion) screen is presented
/// for payments with saved cards (alias/tokenized payments).
/// The default is <code>DCCShowMode.always</code>, meaning DCC is always shown when available.
/// See <code>DCCShowMode</code> for additional information.
@property (nonatomic) enum DTDCCShowMode savedCardDCCShowMode;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Mode to control when DCC is presented for saved card payments (alias/tokenized payments).
typedef SWIFT_ENUM_NAMED(NSInteger, DTDCCShowMode, "DCCShowMode", open) {
/// The DCC screen is always shown when the merchant is set up and the saved card is eligible for DCC.
  DTDCCShowModeAlways = 0,
/// DCC is initially shown repeatedly for each eligible card. The more often a user declines DCC
/// for a given saved card, the less often the DCC screen is shown for that card.
/// This mode is recommended when customers frequently pay with saved cards to enhance
/// the user experience and reduce unnecessary clicks.
/// Note: the information whether DCC was previously declined is stored on the device only.
  DTDCCShowModeSmart = 1,
/// Show DCC only in guest mode and not for payments with saved cards.
  DTDCCShowModeNever = 2,
};


/// This class includes the success message and other details of a transaction.
/// You will also obtain a transactionId that you can use for operations
/// after the transaction (e.g. settlement, cancel or refund requests).
SWIFT_CLASS_NAMED("TransactionSuccess")
@interface DTTransactionSuccess : NSObject
/// The payment method used during the transaction.
@property (nonatomic, readonly) enum DTPaymentMethodType paymentMethodType;
/// Object containing the saved payment method details.
/// The saved payment method details are also returned to your webhook
/// and can be accessed with a status server-to-server request.
@property (nonatomic, readonly, strong) DTSavedPaymentMethod * _Nullable savedPaymentMethod;
/// The transactionId that you can use for operations after the
/// transaction (eg. settlement, cancel or refund requests).
@property (nonatomic, readonly, copy) NSString * _Nonnull transactionId;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end









#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
#ifndef DATATRANS_SWIFT_H
#define DATATRANS_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
@import PassKit;
#endif

#import <Datatrans/Datatrans.h>

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="Datatrans",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class NSURL;

/// Use this class if your app crashes when switching to/from external payment apps,
/// such as TWINT, Swish, Vipps, and MobilePay. Our automatic app callback logic
/// may interfere with other logic in your app and needs to be disabled.
/// Globally set <code>AppCallbackHandler.shared.automaticCallbacks</code> to <code>false</code>.
/// Then implement the <code>application(_:open:options:)</code> method in your AppDelegate
/// and call <code>AppCallbackHandler.shared.handleURL(url)</code> with the URL received.
SWIFT_CLASS_NAMED("AppCallbackHandler")
@interface DTAppCallbackHandler : NSObject
/// Returns the shared instance of this class.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) DTAppCallbackHandler * _Nonnull shared;)
+ (DTAppCallbackHandler * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// Whether automatic callback handling is enabled or not. By default, automatic callback handling is enabled.
/// Set this to <code>false</code> to disable automatic callbacks and implement them yourself using <code>handleURL(url)</code>.
@property (nonatomic) BOOL automaticCallbacks;
/// Invoke this method from your AppDelegate’s implementation of <code>application(_:open:options:)</code> with the URL received.
/// The method returns <code>true</code> if the URL was handled by the SDK or <code>false</code> otherwise.
- (BOOL)handleURL:(NSURL * _Nonnull)url SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol DTApplePayDelegate;
@class NSString;
@class PKPaymentRequest;

/// Configuration object for Apple Pay transactions.
SWIFT_CLASS_NAMED("ApplePayConfig")
@interface DTApplePayConfig : NSObject <NSCopying>
/// Delegate object for callbacks during Apple Pay authorization
@property (nonatomic, weak) id <DTApplePayDelegate> _Nullable delegate;
/// Use this label to configure the final summary of the purchase. The default
/// label is “Total”, but you can also replace it with the name of your shop.
/// The string will then read: PAY YOURSHOP: XX.XX
@property (nonatomic, copy) NSString * _Nullable finalSummaryItemLabel;
/// The request object for further configuration of Apple Pay. Please refer to
/// the official Apple Pay documentation for more information.
@property (nonatomic, readonly, strong) PKPaymentRequest * _Nonnull request;
/// Shows Apple Pay additionally on the saved payment method selection screen.
@property (nonatomic) BOOL showApplePayAsSavedPaymentMethod;
/// Use this option to show Apple Pay as a payment button instead of a
/// listed payment method.
@property (nonatomic) BOOL showLargeButton;
/// Use this option to hide and disable Apple Pay when the user hasn’t yet set up
/// a supported card with Apple Pay. By default Apple Pay is shown in any case.
@property (nonatomic) BOOL existingCardRequired;
/// Use this method to determine the availability of Apple Pay for the specified parameters on a given device. Note that while the SDK automatically manages the visibility
/// of Apple Pay and hides it when not available, if Apple Pay is the only payment option and it is not available, an error will be thrown.
/// This method is commonly employed in scenarios where Apple Pay is presented as a fast checkout option on a product page or when the merchant displays
/// the list of available payment methods.
/// \param supportedNetworks Supported card acquirers.
///
/// \param existingCardRequired Determines whether Apple Pay should be exclusively available when at least one supported card is already set up by the user.
///
///
/// returns:
/// True if Apple Pay is available on the device, false if it is unavailable.
+ (BOOL)hasApplePayWithSupportedNetworks:(NSArray<PKPaymentNetwork> * _Nonnull)supportedNetworks existingCardRequired:(BOOL)existingCardRequired SWIFT_WARN_UNUSED_RESULT;
/// Creates a new Apple Pay configuration object with an Apple Pay country code.
/// If no countryCode is specified, the SDK will set Switzerland as the country code.
/// \param applePayMerchantId The merchant identifier (Merchant ID) at Apple,
/// which you created together with the CSR file provided by Datatrans.
///
/// \param supportedNetworks Supported card acquirers.
///
/// \param countryCode Apple Pay country code
///
- (nonnull instancetype)initWithApplePayMerchantId:(NSString * _Nonnull)applePayMerchantId supportedNetworks:(NSArray<PKPaymentNetwork> * _Nonnull)supportedNetworks countryCode:(NSString * _Nonnull)countryCode OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nonnull instancetype)initWithApplePayMerchantId:(NSString * _Nonnull)applePayMerchantId supportedNetworks:(NSArray<PKPaymentNetwork> * _Nonnull)supportedNetworks;
/// :nodoc:
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSCoder;

/// This class includes the Datatrans error name
SWIFT_CLASS_NAMED("BackendError")
@interface DTBackendError : NSError
/// Datatrans error name
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// :nodoc:
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithDomain:(NSString * _Nonnull)domain code:(NSInteger)code userInfo:(NSDictionary<NSString *, id> * _Nullable)dict OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


@class NSNumber;

/// Configuration object for Boncard transactions.
SWIFT_CLASS_NAMED("BoncardConfig")
@interface DTBoncardConfig : NSObject <NSCopying>
/// Creates a new Boncard configuration object.
/// This initializer is for use from Objective-C only. Instead of <code>[BoncardType]</code>, it
/// takes <code>[NSNumber]</code> containing <code>rawValue</code>s of <code>BoncardType</code>.
/// Example:
/// <code>[[DTBoncardConfig alloc] initWithBoncardTypes:@[@(DTBoncardTypeGiftCard), @(DTBoncardTypeBoncard)]];</code>
/// \param boncardTypesObjc The types of Boncard (and their order) to
/// display in the payment method selection for the <code>PaymentMethodType.Boncard</code>
/// payment method type.
///
- (nonnull instancetype)initWithBoncardTypes:(NSArray<NSNumber *> * _Nonnull)boncardTypesObjc;
/// :nodoc:
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// The different types of Boncard, for determining how the <code>PaymentMethodType.Boncard</code>
/// payment method type is displayed in the payment selection.
typedef SWIFT_ENUM_NAMED(NSInteger, DTBoncardType, "BoncardType", open) {
/// Displays as “Gift card” with a generic gift card icon
  DTBoncardTypeGiftCard = 0,
/// Displays as “Boncard”
  DTBoncardTypeBoncard = 1,
/// Displays as “Lunch-Check” with the Lunch-Check logo
  DTBoncardTypeLunchCheck = 2,
/// Displays as “Voucher” with the SBB Voucher logo
  DTBoncardTypeSbbVoucher = 3,
};

enum DTPaymentMethodType : NSInteger;

/// This is the base class for payment methods. It contains a type to identify the
/// payment method, e.g. Visa or Mastercard.
SWIFT_CLASS_NAMED("PaymentMethod")
@interface DTPaymentMethod : NSObject <NSCoding, NSCopying>
/// Payment method type, e.g. Visa
@property (nonatomic, readonly) enum DTPaymentMethodType type;
/// This init method initializes a <code>PaymentMethod</code> object with the
/// payment method type.
/// \param type Payment method type, e.g. Visa
///
- (nonnull instancetype)initWithType:(enum DTPaymentMethodType)type OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class DTCardExpiryDate;

/// Use this class to process raw card data for payments. You should use
/// this class if your app takes over the user interface for the card input fields.
SWIFT_CLASS_NAMED("Card")
@interface DTCard : DTPaymentMethod
/// Card number
@property (nonatomic, copy) NSString * _Nonnull number;
/// Expiry date
@property (nonatomic, strong) DTCardExpiryDate * _Nonnull expiryDate;
/// Card security code - nil if the card does not have a card security code.
@property (nonatomic, copy) NSString * _Nullable cvv;
/// Cardholder’s name (as written on the card)
@property (nonatomic, copy) NSString * _Nullable cardholder;
/// Use this to initialize a card object with the card data.
/// \param type Card type, e.g. Visa or Mastercard
///
/// \param number Card number
///
/// \param expiryDate Expiry date
///
/// \param cvv Card security code - nil if the card does not have a card security code.
///
/// \param cardholder Cardholder’s name (as written on the card)
///
- (nonnull instancetype)initWithType:(enum DTPaymentMethodType)type number:(NSString * _Nonnull)number expiryDate:(DTCardExpiryDate * _Nonnull)expiryDate cvv:(NSString * _Nullable)cvv cardholder:(NSString * _Nullable)cardholder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithType:(enum DTPaymentMethodType)type SWIFT_UNAVAILABLE;
@end


/// Class to be used to represent the card expiry date (month and year).
SWIFT_CLASS_NAMED("CardExpiryDate")
@interface DTCardExpiryDate : NSObject <NSCopying>
/// Formats the month to a two digit string.
@property (nonatomic, readonly, copy) NSString * _Nonnull formattedMonth;
/// Formats the year to a two digit string.
@property (nonatomic, readonly, copy) NSString * _Nonnull formattedYear;
/// Card expiry month, [1, 12], e.g. 1 for January or 12 for December
@property (nonatomic) NSInteger month;
/// Card expiry year, 2 or 4 digits, e.g. 30 or 2030
@property (nonatomic) NSInteger year;
/// Initializes the card expiry date with the given month and year.
/// \param month Card expiry month, [1, 12], e.g. 1 for January or 12 for December
///
/// \param year Card expiry year, 2 or 4 digits, e.g. 30 or 2030
///
- (nonnull instancetype)initWithMonth:(NSInteger)month year:(NSInteger)year OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// :nodoc:
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Use this to choose which label to display for the card option
/// in the payment method selection.
typedef SWIFT_ENUM_NAMED(NSInteger, DTCardLabelType, "CardLabelType", open) {
/// Displays as “Credit or debit card”.
  DTCardLabelTypeCreditOrDebitCard = 0,
/// Displays as “Credit card”.
  DTCardLabelTypeCreditCard = 1,
/// Displays as “Debit card”.
  DTCardLabelTypeDebitCard = 2,
};




/// Callback invoked by the SDK when the custom initial loader must be dismissed.
/// important:
/// The SDK does not invoke the callback when nothing has to be shown throughout the process. Make sure you dismiss the loading animation at the end of the transaction if the SDK hasn’t done so already.
SWIFT_PROTOCOL_NAMED("InitialLoaderDelegate")
@protocol DTInitialLoaderDelegate
/// Invoked when SDK content needs to be presented. The app must dismiss/hide its custom loading animation immediately. For the remainder of the process the SDK’s loading animation is used.
- (void)dismissLoader;
@end



/// This class represents a previously tokenized card used in the CVV-only tokenization/verification flow.
SWIFT_CLASS_NAMED("PCIPCVVOnlyCard")
@interface DTPCIPCVVOnlyCard : NSObject
/// The masked card number, e.g. “489537xxxxxx6287”
@property (nonatomic, copy) NSString * _Nonnull maskedCardNumber;
/// Expiry date
@property (nonatomic, strong) DTCardExpiryDate * _Nonnull expiryDate;
/// Use this to initialize a CVV only object.
/// \param type e.g. Visa or Mastercard
///
/// \param maskedCardNumber The masked card number, e.g. “489537xxxxxx6287”
///
/// \param expiryDate Expiry date
///
- (nonnull instancetype)initWithType:(enum DTPaymentMethodType)type maskedCardNumber:(NSString * _Nonnull)maskedCardNumber expiryDate:(DTCardExpiryDate * _Nonnull)expiryDate OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// This class represents a (credit or debit) card which was used for PCI Proxy tokenization.
SWIFT_CLASS_NAMED("PCIPCardInfo")
@interface DTPCIPCardInfo : NSObject
/// The brand of the card, e.g. “VISA”
@property (nonatomic, readonly, copy) NSString * _Nullable brand;
/// The country of the card, e.g. “US”
@property (nonatomic, readonly, copy) NSString * _Nullable countryCode;
/// The issuer of the card, e.g. “U.S. REGION”
@property (nonatomic, readonly, copy) NSString * _Nullable issuer;
/// The masked card number, e.g. “489537xxxxxx6287”
@property (nonatomic, readonly, copy) NSString * _Nonnull maskedCardNumber;
/// Expiry date
@property (nonatomic, readonly, strong) DTCardExpiryDate * _Nonnull expiryDate;
/// The type of the card, e.g. “debit”
@property (nonatomic, readonly, copy) NSString * _Nullable type;
/// The usage of the card, e.g. “consumer”
@property (nonatomic, readonly, copy) NSString * _Nullable usage;
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// This class is used to add cardholder info.
SWIFT_CLASS_NAMED("PCIPCardholder")
@interface DTPCIPCardholder : NSObject
/// Cardholder email address.
@property (nonatomic, copy) NSString * _Nullable emailAddress;
/// Cardholder phone number.
@property (nonatomic, copy) NSString * _Nullable phoneNumber;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol DTPCIPTokenizationDelegate;
@class DTPCIPTokenizationOptions;
@class DTThemeConfiguration;
@class UIViewController;

/// Use this class to start a PCI Proxy tokenization.
/// After the tokenization has been completed - regardless if
/// successful or not - <code>delegate</code> will be called with some basic
/// information about the success or failure.
/// warning:
/// Only use this API if you are a PCI Proxy customer. Use <code>Transaction</code>
/// if you want to register a saved payment method.
SWIFT_CLASS_NAMED("PCIPTokenization")
@interface DTPCIPTokenization : NSObject
/// This delegate will be notified after a tokenization has been finished,
/// successfully or not.
@property (nonatomic, weak) id <DTPCIPTokenizationDelegate> _Nullable delegate;
/// The available options for how a tokenization is handled by the mobile SDK.
@property (nonatomic, strong) DTPCIPTokenizationOptions * _Nonnull options;
/// The theme to be used by the SDK.
@property (nonatomic, strong) DTThemeConfiguration * _Nonnull theme;
/// Use this init method if you use your own UI and already have a <code>Card</code> instance with the
/// card data to be tokenized. After this class is initialized, you should define its <code>delegate</code>,
/// the <code>options</code> properties and a <code>theme</code> if desired.
/// \param merchantId Your merchantId.
///
/// \param card Card object to tokenize.
///
- (nonnull instancetype)initWithMerchantId:(NSString * _Nonnull)merchantId card:(DTCard * _Nonnull)card OBJC_DESIGNATED_INITIALIZER;
/// Use this init method to tokenize the CVV of an already tokenized card. After this
/// class is initialized, you should define its <code>delegate</code>, the <code>options</code> properties
/// and a <code>theme</code> if desired.
/// \param merchantId Your merchantId.
///
/// \param cvvOnlyCard Previously tokenized card for which the CVV should be entered.
///
- (nonnull instancetype)initWithMerchantId:(NSString * _Nonnull)merchantId cvvOnlyCard:(DTPCIPCVVOnlyCard * _Nonnull)cvvOnlyCard OBJC_DESIGNATED_INITIALIZER;
/// Use this init method to allow the user to enter the  card data to be tokenized. After this
/// class is initialized, you should define its <code>delegate</code>, the <code>options</code> properties
/// and a <code>theme</code> if desired.
/// This initializer is for use from Objective-C only. Instead of <code>[PaymentMethodType]</code>, it
/// takes <code>[NSNumber]</code> containing <code>rawValue</code>s of <code>PaymentMethodType</code>.
/// Example:
/// <code>[[DTPCIPTokenization alloc] initWithMerchantId:@"..." paymentMethodTypes:@[@(DTPaymentMethodTypeVisa), @(DTPaymentMethodTypeMasterCard)]];</code>
/// \param merchantId Your merchantId.
///
/// \param paymentMethodTypesObjc The allowed credit or debit card types.
///
- (nonnull instancetype)initWithMerchantId:(NSString * _Nonnull)merchantId paymentMethodTypes:(NSArray<NSNumber *> * _Nonnull)paymentMethodTypesObjc;
/// Starts the SDK and displays any needed user interface using the provided
/// <code>presentingController</code>. Note that a tokenization can only
/// be started once. For SwiftUI, use <code>View.datatrans(startWithPCIPTokenization:)</code> instead.
/// \param presentingController <code>UIViewController</code>
/// used to present the user interface during an on-going tokenization.
///
- (void)startWithPresentingController:(UIViewController * _Nonnull)presentingController;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class DTPCIPTokenizationSuccess;
@class DTPCIPTokenizationError;

/// Implement PCIPTokenizationDelegate to be notified when a tokenization
/// ends. PCIPTokenizationDelegate will notify you about the success,
/// error or cancel state of the processed tokenization.
SWIFT_PROTOCOL_NAMED("PCIPTokenizationDelegate")
@protocol DTPCIPTokenizationDelegate
/// This is called after a tokenization has been successfully
/// completed. This callback provides details about the tokenization.
/// \param tokenization The object containing the information
/// of the completed tokenization.
///
/// \param result The result object containing the tokenization ID and
/// other useful information, e.g. about the card.
///
- (void)tokenizationDidFinish:(DTPCIPTokenization * _Nonnull)tokenization result:(DTPCIPTokenizationSuccess * _Nonnull)result;
/// This is called after a tokenization fails or encounters an error.
/// Keep in mind that the SDK shows the error to the user before
/// this is invoked. Therefore, this callback can be used to cancel
/// any on-going process involving the tokenization.
/// You may also use the error details provided here and display it
/// the way you want when suppressing the error message within
/// the <code>PCIPTokenizationOptions</code>.
/// \param tokenization The object containing the information
/// of the failed tokenization.
///
/// \param error The error that occurred.
///
- (void)tokenizationDidFail:(DTPCIPTokenization * _Nonnull)tokenization error:(DTPCIPTokenizationError * _Nonnull)error;
@optional
/// This is called after a tokenization has been cancelled. This callback
/// can be used to cancel any on-going process involving the tokenization.
/// \param tokenization The object containing the
/// information of the cancelled tokenization.
///
- (void)tokenizationDidCancel:(DTPCIPTokenization * _Nonnull)tokenization;
@end


/// This class includes the error message of a failed tokenization.
SWIFT_CLASS_NAMED("PCIPTokenizationError")
@interface DTPCIPTokenizationError : NSError
/// The error code for technical errors.
/// Use this constant to compare it to a <code>PCIPTokenizationError</code>’s <code>code</code>.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger technical;)
+ (NSInteger)technical SWIFT_WARN_UNUSED_RESULT;
/// The error code for validation errors.
/// Use this constant to compare it to a <code>PCIPTokenizationError</code>’s <code>code</code>.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger validation;)
+ (NSInteger)validation SWIFT_WARN_UNUSED_RESULT;
/// The BackendError that contains the Datatrans error name
@property (nonatomic, readonly, strong) DTBackendError * _Nullable backendError;
- (nonnull instancetype)initWithDomain:(NSString * _Nonnull)domain code:(NSInteger)code userInfo:(NSDictionary<NSString *, id> * _Nullable)dict OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// This class can be used to specify miscellaneous options related to the tokenization.
SWIFT_CLASS_NAMED("PCIPTokenizationOptions")
@interface DTPCIPTokenizationOptions : NSObject
/// Use this setting to change the UI language. If this is not
/// specified, the default language determined by the system will be used.
/// The supported values are <code>en</code>, <code>da</code>, <code>de</code>, <code>es</code>, <code>fi</code>, <code>fr</code>, <code>it</code>,  <code>nl</code>,<code>no</code>, <code>pt</code>, <code>sv</code> and <code>nil</code>.
@property (nonatomic, copy) NSString * _Nullable language;
/// Use this setting to display or hide critical errors.
@property (nonatomic) BOOL suppressCriticalErrorDialog;
/// Use this setting to switch from production to sandbox. If not specified,
/// the SDK will call the Datatrans production environment.
@property (nonatomic) BOOL testing;
/// Whether secure connections to Datatrans servers require a certificate
/// chain signed with a specific CA private key. The device’s trust settings
/// are explicitly ignored, i.e. custom installed/white-listed certificates
/// and/or CAs will not work.
/// Please be advised that enabling this option will break your app in many
/// corporate networks with anti-malware/-theft/-espionage SSL proxying.
@property (nonatomic) BOOL useCertificatePinning;
/// Use this setting to pass cardholder information for network tokens.
/// important:
/// For AMEX network tokens, either the phone number or email
/// address is mandatory. The phone number must be given in international format
/// with a leading plus sign (+) followed by country code.
@property (nonatomic, strong) DTPCIPCardholder * _Nonnull cardholder;
/// Use this option when no card data is entered in our SDK and you want to show your own loading animation during the SDK’s initial network requests.
/// important:
/// Your loader must be visible before starting the SDK. Be aware that the SDK blocks user input. Your loading screen can not have a cancel button or give the impression that users can still interact with the UI.
@property (nonatomic, weak) id <DTInitialLoaderDelegate> _Nullable customInitialLoaderDelegate;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// This class aggregates the results of a successful PCI Proxy tokenization.
SWIFT_CLASS_NAMED("PCIPTokenizationSuccess")
@interface DTPCIPTokenizationSuccess : NSObject
/// Object representing the (credit or debit) card which was used
/// for this PCI Proxy tokenization.
@property (nonatomic, readonly, strong) DTPCIPCardInfo * _Nonnull cardInfo;
/// The payment method used for this PCI Proxy tokenization.
@property (nonatomic, readonly) enum DTPaymentMethodType paymentMethodType;
/// The resulting tokenizationId.
@property (nonatomic, readonly, copy) NSString * _Nonnull tokenizationId;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// The payment method used during the transaction.
typedef SWIFT_ENUM_NAMED(NSInteger, DTPaymentMethodType, "PaymentMethodType", open) {
/// Visa payment method
  DTPaymentMethodTypeVisa = 0,
/// MasterCard payment method
  DTPaymentMethodTypeMasterCard = 1,
/// Diners Club payment method
  DTPaymentMethodTypeDinersClub = 2,
/// American Express payment method
  DTPaymentMethodTypeAmericanExpress = 3,
/// JCB payment method
  DTPaymentMethodTypeJCB = 4,
/// UATP payment method
  DTPaymentMethodTypeUATP = 5,
/// Discover payment method
  DTPaymentMethodTypeDiscover = 6,
/// SUPERCARD payment method
  DTPaymentMethodTypeSupercard = 7,
/// PostFinance Card payment method
  DTPaymentMethodTypePostFinanceCard = 8,
/// PostFinance E-Finance payment method
  DTPaymentMethodTypePostFinanceEFinance = 9,
/// PayPal payment method
  DTPaymentMethodTypePayPal = 10,
/// Swisscom Pay payment method
  DTPaymentMethodTypeEasypay = 11,
/// SEPA (ELV) payment method
  DTPaymentMethodTypeSEPA = 12,
/// SwissBilling payment method
  DTPaymentMethodTypeSwissBilling = 13,
/// Twint payment method
  DTPaymentMethodTypeTwint = 14,
/// Apple Pay payment method
  DTPaymentMethodTypeApplePay = 15,
/// Reka payment method
  DTPaymentMethodTypeReka = 16,
/// CembraPay payment method
  DTPaymentMethodTypeCembraPay = 17,
/// SwissPass payment method
  DTPaymentMethodTypeSwissPass = 18,
/// Powerpay payment method
  DTPaymentMethodTypePowerpay = 19,
/// Paycard payment method
  DTPaymentMethodTypePaycard = 20,
/// Paysafecard payment method
  DTPaymentMethodTypePaysafecard = 21,
/// Gift card / Boncard / Lunch-Check payment method
  DTPaymentMethodTypeBoncard = 22,
/// Elo card payment method
  DTPaymentMethodTypeElo = 23,
/// Hipercard payment method
  DTPaymentMethodTypeHipercard = 24,
/// Klarna payment method
  DTPaymentMethodTypeKlarna = 25,
/// Dankort payment method
  DTPaymentMethodTypeDankort = 26,
/// Swish payment method
  DTPaymentMethodTypeSwish = 27,
/// Vipps payment method
  DTPaymentMethodTypeVipps = 28,
/// MobilePay payment method
  DTPaymentMethodTypeMobilePay = 29,
/// Maestro payment method
  DTPaymentMethodTypeMaestro = 30,
/// China Union Pay payment method
  DTPaymentMethodTypeChinaUnionPay = 31,
/// SBB Half Fare Travelcard PLUS payment method
  DTPaymentMethodTypeHalfFarePlus = 32,
/// iDEAL payment method
  DTPaymentMethodTypeIDEAL = 33,
/// Postfinance Pay
  DTPaymentMethodTypePostFinancePay = 34,
};


/// Use this class to map the payment method identifiers from Datatrans to the <code>PaymentMethodType</code>.
SWIFT_CLASS_NAMED("PaymentMethodTypeMapper")
@interface DTPaymentMethodTypeMapper : NSObject
/// This function returns the <code>PaymentMethodType</code> based on the Datatrans
/// payment method identifier.
/// This is for use from Objective-C only. The returned <code>NSNumber</code> contains the
/// <code>rawValue</code> of a <code>DTPaymentMethodType</code>.
/// \param identifier The payment method identifier from Datatrans
///
///
/// returns:
/// The payment method type, e.g. Visa, or nil if <code>identifier</code> is invalid
+ (NSNumber * _Nullable)toTypeWithIdentifier:(NSString * _Nonnull)identifier SWIFT_WARN_UNUSED_RESULT;
/// This function returns the payment method identifier based on the
/// <code>PaymentMethodType</code>.
/// \param type The payment method type, e.g. Visa
///
///
/// returns:
/// The payment method identifier
+ (NSString * _Nonnull)toIdentifierWithType:(enum DTPaymentMethodType)type SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSData;

/// This is the base class to save a payment method and use it to process recurring payments
/// or fast checkouts.
/// This class is sufficient for some payment methods (e.g. Twint). More complex payment
/// methods require you to specify additional details in their <code>SavedPaymentMethod</code>
/// subclass (e.g. card payments, PostFinance, etc.).
/// Please refer to this list to see if you need to use one of the subclasses for your payments:
/// <ul>
///   <li>
///     Easy payment methods: Swisscom Pay, SEPA (ELV), Twint,
///     Apple Pay, CembraPay, SwissPass, Powerpay Invoice
///   </li>
///   <li>
///     Complex payment methods (requiring a <code>SavedPaymentMethod</code> subclass): Card payments,
///     PayPal, PostFinance, Reka, Boncard
///   </li>
/// </ul>
/// Please refer to the Datatrans documentation to see if you can register a payment method
/// during payment or require a dedicated registration.
SWIFT_CLASS_NAMED("SavedPaymentMethod")
@interface DTSavedPaymentMethod : DTPaymentMethod
/// The alias that can be used to process recurring payments or fast checkouts.
@property (nonatomic, copy) NSString * _Nonnull alias;
/// A human readable title.
@property (nonatomic, readonly, copy) NSString * _Nonnull displayTitle;
/// For VoiceOver this title is used instead of displayTitle.
@property (nonatomic, readonly, copy) NSString * _Nonnull accessibilityTitle;
/// This init method has to be used to initialize a saved payment method.
/// \param type Payment method type, e.g. PayPal or Twint
///
/// \param alias The alias that can be used to process recurring payments or fast checkouts.
///
- (nonnull instancetype)initWithType:(enum DTPaymentMethodType)type alias:(NSString * _Nonnull)alias OBJC_DESIGNATED_INITIALIZER;
/// Creates a <code>SavedPaymentMethod</code> from a JSON string.
/// Use this method to deserialize a saved payment method. It takes a JSON string that has been
/// created with <code>toJson()</code>.
/// The JSON string is compatible with the Android version of the Datatrans SDK.
/// \param jsonString The JSON string representation
///
///
/// returns:
/// The decoded <code>SavedPaymentMethod</code> or one of its subclasses, if successful,
/// nil if <code>jsonString</code> is invalid.
+ (DTSavedPaymentMethod * _Nullable)createWithJsonString:(NSString * _Nonnull)jsonString SWIFT_WARN_UNUSED_RESULT;
/// Creates a <code>SavedPaymentMethod</code> from data encoded by the old payment library.
/// \param legacySavedPaymentMethodData Data encoded by
/// <code>DTRecurringPaymentMethod.data()</code>, <code>DTCreditCard.data()</code>,
/// <code>DTPostFinanceCard.data()</code>, <code>DTReka.data()</code>, <code>DTPayPal.data()</code> or <code>DTELV.data()</code>.
///
///
/// returns:
/// The decoded <code>SavedPaymentMethod</code> or one of its subclasses, if successful,
/// nil if <code>legacySavedPaymentMethodData</code> is invalid.
+ (DTSavedPaymentMethod * _Nullable)createWithLegacySavedPaymentMethodData:(NSData * _Nonnull)legacySavedPaymentMethodData SWIFT_WARN_UNUSED_RESULT;
/// Returns a JSON string representation of this saved payment method object.
/// Use this method to serialize a saved payment method. The resulting JSON string can be deserialized with
/// <code>create(jsonString:)</code>.
/// The JSON string is compatible with the Android version of the Datatrans SDK.
///
/// returns:
/// The JSON string representation
- (NSString * _Nonnull)toJson SWIFT_WARN_UNUSED_RESULT;
/// This function checks if the saved payment method is valid.
/// When e.g. called on a <code>SavedCard</code> it tells you if the expiration date is in the future or not.
- (BOOL)isValid SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithType:(enum DTPaymentMethodType)type SWIFT_UNAVAILABLE;
@end

@class DTSavedCard;

/// This class contains saved Apple Pay payment method details.
/// Like any other <code>SavedPaymentMethod</code> subclass, it can be used to initiate
/// follow-up payments with the same method. Note: Using this class will still present
/// the Apple Pay sheet to the user when they are in session.
/// A <code>SavedApplePay</code> object can be created by successfully completing an Apple Pay
/// payment or with a dedicated registration.
SWIFT_CLASS_NAMED("SavedApplePay")
@interface DTSavedApplePay : DTSavedPaymentMethod
/// The Apple Pay device token associated with the previous transaction.
/// <em>Important:</em> This data is strictly for use in merchant-initiated follow-up transactions (MIT)
/// where the customer is not present during payment. Do not display any information such as
/// <code>maskedCardNumber</code> or <code>cardExpiryDate</code> to users. These details are derived from
/// the device token and do not represent the actual card information. For details about the real
/// card, refer to <code>last4</code>.
@property (nonatomic, strong) DTSavedCard * _Nonnull token;
/// The last 4 digits of the real card number used in the transaction. Note: This information may
/// not be available for all card types.
@property (nonatomic, copy) NSString * _Nullable last4;
/// A human readable title.
@property (nonatomic, readonly, copy) NSString * _Nonnull displayTitle;
/// For VoiceOver this title is used instead of displayTitle.
@property (nonatomic, readonly, copy) NSString * _Nonnull accessibilityTitle;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)initWithType:(enum DTPaymentMethodType)type alias:(NSString * _Nonnull)alias SWIFT_UNAVAILABLE;
@end


/// This class contains saved Boncard payment method details.
/// Just like any other <code>SavedPaymentMethod</code> subclass, this class can be used
/// to finalize a payment without user interaction or to display a selection of saved
/// payment methods to the user for fast checkouts.
/// A <code>SavedBoncard</code> can be created by successfully completing a Boncard payment or
/// with a dedicated registration.
SWIFT_CLASS_NAMED("SavedBoncard")
@interface DTSavedBoncard : DTSavedPaymentMethod
/// The specific subtype of card, which affects the title and logo that is displayed for the card.
@property (nonatomic, readonly) enum DTBoncardType boncardType;
/// The masked card number you can use to display that specific card in your app.
@property (nonatomic, readonly, copy) NSString * _Nullable maskedCardNumber;
/// This init method has to be used to initialize a saved Boncard payment method.
/// \param alias Alias for a Boncard
///
/// \param maskedCardNumber The masked card number you can use to display that
/// specific card in your app.
///
/// \param boncardType The specific subtype of card, which affects the title and logo
/// that is displayed for the card.
///
- (nonnull instancetype)initWithAlias:(NSString * _Nonnull)alias maskedCardNumber:(NSString * _Nullable)maskedCardNumber boncardType:(enum DTBoncardType)boncardType OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithType:(enum DTPaymentMethodType)type alias:(NSString * _Nonnull)alias SWIFT_UNAVAILABLE;
@end


/// This class contains saved credit or debit card payment method details.
/// Just like any other <code>SavedPaymentMethod</code> subclass, this class can be used
/// to finalize a payment without user interaction or to display a selection of saved
/// payment methods to the user for fast checkouts.
/// A <code>SavedCard</code> can be created by successfully completing a card payment or
/// with a dedicated registration.
SWIFT_CLASS_NAMED("SavedCard")
@interface DTSavedCard : DTSavedPaymentMethod
/// Expiry date
@property (nonatomic, readonly, strong) DTCardExpiryDate * _Nullable cardExpiryDate;
/// The masked card number you can use to display that specific card in your app.
/// The masked card number shows the first 6 digits and the last 4 digits of the card,
/// e.g. 432930xxxxxx6095.
@property (nonatomic, readonly, copy) NSString * _Nullable maskedCardNumber;
/// Cardholder’s name
@property (nonatomic, copy) NSString * _Nullable cardholder;
/// Initializes a <code>SavedCard</code> object with the given card data.
/// \param type Payment method type, e.g. Visa
///
/// \param alias This is the alias for the card, also known as token.
/// This can be used to debit the card without further customer interaction.
///
/// \param cardExpiryDate Expiry date
///
/// \param maskedCardNumber The masked card number you can use to display
/// that specific card in your app. The masked card number shows the first 6
/// digits and the last 4 digits of the card, e.g. 432930xxxxxx6095.
///
/// \param cardholder Cardholder’s name
///
- (nonnull instancetype)initWithType:(enum DTPaymentMethodType)type alias:(NSString * _Nonnull)alias cardExpiryDate:(DTCardExpiryDate * _Nullable)cardExpiryDate maskedCardNumber:(NSString * _Nullable)maskedCardNumber cardholder:(NSString * _Nullable)cardholder OBJC_DESIGNATED_INITIALIZER;
/// Checks if the expiration date is in the future or not.
- (BOOL)isValid SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// :nodoc:
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithType:(enum DTPaymentMethodType)type alias:(NSString * _Nonnull)alias SWIFT_UNAVAILABLE;
@end


/// This class contains saved PayPal payment method details.
/// Just like any other <code>SavedPaymentMethod</code> subclass, this class can be used
/// to finalize a payment without user interaction or to display a selection of saved
/// payment methods to the user for fast checkouts.
/// A <code>SavedPayPal</code> can be created by successfully completing a PayPal payment or
/// with a dedicated registration.
SWIFT_CLASS_NAMED("SavedPayPal")
@interface DTSavedPayPal : DTSavedPaymentMethod
/// PayPal e-mail address. This will be used for displaying purposes.
@property (nonatomic, copy) NSString * _Nullable payPalEmail;
/// This init method has to be used to initialize a saved PayPal payment method.
/// \param alias Alias for a PayPal account.
///
/// \param payPalEmail PayPal e-mail address. This will be used for displaying purposes.
///
- (nonnull instancetype)initWithAlias:(NSString * _Nonnull)alias payPalEmail:(NSString * _Nullable)payPalEmail OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithType:(enum DTPaymentMethodType)type alias:(NSString * _Nonnull)alias SWIFT_UNAVAILABLE;
@end



/// This class contains saved PostFinance Card payment method details.
/// Just like any other <code>SavedPaymentMethod</code> subclass, this class can be used
/// to finalize a payment without user interaction or to display a selection of saved
/// payment methods to the user for fast checkouts.
/// A <code>SavedPostFinanceCard</code> can be created by successfully completing a
/// PostFinance Card payment or with a dedicated registration.
SWIFT_CLASS_NAMED("SavedPostFinanceCard")
@interface DTSavedPostFinanceCard : DTSavedCard
/// This init method has to be used to initialize a saved PostFinance Card payment method.
/// \param alias Alias for a PostFinance Card.
///
/// \param cardExpiryDate Expiry date
///
/// \param maskedCardNumber The masked card number you can use to display
/// that specific card in your app. The masked card number shows the last 4
/// digits of the card, e.g. **** 1234.
///
/// \param cardholder Cardholder’s name
///
- (nonnull instancetype)initWithAlias:(NSString * _Nonnull)alias cardExpiryDate:(DTCardExpiryDate * _Nullable)cardExpiryDate maskedCardNumber:(NSString * _Nullable)maskedCardNumber cardholder:(NSString * _Nullable)cardholder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithType:(enum DTPaymentMethodType)type alias:(NSString * _Nonnull)alias cardExpiryDate:(DTCardExpiryDate * _Nullable)cardExpiryDate maskedCardNumber:(NSString * _Nullable)maskedCardNumber cardholder:(NSString * _Nullable)cardholder SWIFT_UNAVAILABLE;
@end


/// This class contains saved PostFinance Pay payment method details.
/// Like any other <code>SavedPaymentMethod</code> subclass, this class can be used
/// to pay with a previously registered payment method or to present a list of saved
/// payment methods to the user for fast checkouts.
/// A <code>SavedPostFinancePay</code> object can be created either by successfully completing
/// a PostFinance Pay payment or through a dedicated registration process.
SWIFT_CLASS_NAMED("SavedPostFinancePay")
@interface DTSavedPostFinancePay : DTSavedPaymentMethod
/// Masked PostFinance account number (IBAN). This will be used for displaying purposes.
@property (nonatomic, copy) NSString * _Nullable maskedAccountNumber;
/// A human readable title.
@property (nonatomic, readonly, copy) NSString * _Nonnull displayTitle;
/// Initializes a <code>SavedPostFinancePay</code> object.
/// \param alias Alias for a PostFinance account.
///
/// \param maskedAccountNumber Masked PostFinance account number (IBAN). This will be used for displaying purposes.
///
- (nonnull instancetype)initWithAlias:(NSString * _Nonnull)alias maskedAccountNumber:(NSString * _Nullable)maskedAccountNumber OBJC_DESIGNATED_INITIALIZER;
/// :nodoc
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// :nodoc:
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithType:(enum DTPaymentMethodType)type alias:(NSString * _Nonnull)alias SWIFT_UNAVAILABLE;
@end


/// This class contains saved Reka card payment method details.
/// Just like any other <code>SavedPaymentMethod</code> subclass, this class can be used
/// to finalize a payment without user interaction or to display a selection of saved
/// payment methods to the user for fast checkouts.
/// A <code>SavedReka</code> can be created by successfully completing a Reka payment or
/// with a dedicated registration.
SWIFT_CLASS_NAMED("SavedReka")
@interface DTSavedReka : DTSavedCard
/// This init method has to be used to initialize a saved Reka payment method.
/// \param alias Alias for a Reka card.
///
/// \param cardExpiryDate Expiry date
///
/// \param maskedCardNumber The masked card number you can use to display
/// that specific card in your app. The masked card number shows the first 6
/// digits and the last 4 digits of the card, e.g. 123456xxxxxxxxx1234.
///
/// \param cardholder Cardholder’s name
///
- (nonnull instancetype)initWithAlias:(NSString * _Nonnull)alias cardExpiryDate:(DTCardExpiryDate * _Nonnull)cardExpiryDate maskedCardNumber:(NSString * _Nullable)maskedCardNumber cardholder:(NSString * _Nullable)cardholder;
/// :nodoc:
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithType:(enum DTPaymentMethodType)type alias:(NSString * _Nonnull)alias cardExpiryDate:(DTCardExpiryDate * _Nullable)cardExpiryDate maskedCardNumber:(NSString * _Nullable)maskedCardNumber cardholder:(NSString * _Nullable)cardholder OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// This class contains saved SEPA (ELV) payment method details.
/// Just like any other <code>SavedPaymentMethod</code> subclass, this class can be used
/// to finalize a payment without user interaction or to display a selection of saved
/// payment methods to the user for fast checkouts.
/// A <code>SavedSEPA</code> can be created by successfully completing a SEPA payment or
/// with a dedicated registration.
SWIFT_CLASS_NAMED("SavedSEPA")
@interface DTSavedSEPA : DTSavedPaymentMethod
/// A bank code (German: Bankleitzahl) is a unique identification code for a
/// particular bank. This is required for aliases created before April 15th 2015.
@property (nonatomic, readonly, copy) NSString * _Nullable bankCode;
/// Alias for SEPA (ELV).
@property (nonatomic, copy) NSString * _Nonnull alias;
/// This init method has to be used to initialize a saved SEPA (ELV) payment method.
/// \param alias Alias for SEPA (ELV).
///
- (nonnull instancetype)initWithAlias:(NSString * _Nonnull)alias;
/// This init method has to be used with SEPA (ELV) aliases created before April 15th 2015.
/// Please refer to <code>init(alias:)</code> for newer aliases.
/// \param alias Alias for SEPA (ELV). This value was returned for aliases created before April 15th 2015.
///
/// \param bankCode A bank code (German: Bankleitzahl) is a unique identification
/// code for a particular bank. This is required for aliases created before April 15th 2015.
///
- (nonnull instancetype)initWithAlias:(NSString * _Nonnull)alias bankCode:(NSString * _Nonnull)bankCode;
/// :nodoc:
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithType:(enum DTPaymentMethodType)type alias:(NSString * _Nonnull)alias OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@class UIColor;

/// This class gives you options to customize the theme of the library.
/// The library offers by default a theme for light and dark mode. If your app supports
/// both themes too, make sure to use <code>UIColor.init(dynamicProvider:)</code>
/// when creating custom themes.
/// We recommend you to start by customizing <code>linkColor</code> before anything else,
/// as this is often used as a fallback color.
SWIFT_CLASS_NAMED("ThemeConfiguration")
@interface DTThemeConfiguration : NSObject
/// Background color of the navigation bars. If this is not specified, the
/// navigation bars will be transparent.
@property (nonatomic, strong) UIColor * _Nullable barBackgroundColor;
/// Color of the buttons in the navigation bars. If this is not specified,
/// the color will be the color set in <code>linkColor</code>.
@property (nonatomic, strong) UIColor * _Nullable barLinkColor;
/// Color of the title within the navigation bars. If this is not specified,
/// the color will be the text color.
/// The text color is either white or black and cannot be customized.
@property (nonatomic, strong) UIColor * _Nullable barTitleColor;
/// Background color of large buttons, such as the ‘Pay’ button. If this is
/// not specified, the color will be the color set in <code>linkColor</code>.
@property (nonatomic, strong) UIColor * _Nullable buttonColor;
/// Text color of large buttons, such as the ‘Pay’ button. If this is not
/// specified, the color will be set to white.
@property (nonatomic, strong) UIColor * _Nullable buttonTextColor;
/// Color of text-only buttons or links and the text cursor. If this is not
/// specified, the color will be in a blue tone that fits the standard iOS design.
@property (nonatomic, strong) UIColor * _Nullable linkColor;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol DTTransactionDelegate;
@class DTTransactionOptions;

/// Use this class to start a transaction with a <code>mobileToken</code> that has previously been initialized
/// with a server-to-server init call.
/// This class is the main class to start any operation with the SDK.
/// After the transaction has been completed - regardless if successful or not - <code>delegate</code> will
/// be called with some basic information about the success or failure.
SWIFT_CLASS_NAMED("Transaction")
@interface DTTransaction : NSObject <DTErrorHandlerDelegate>
/// This delegate will be notified after a transaction has been finished,
/// successfully or not.
@property (nonatomic, weak) id <DTTransactionDelegate> _Nullable delegate;
/// The available options for how a transaction is handled by the mobile SDK.
@property (nonatomic, strong) DTTransactionOptions * _Nonnull options;
/// The theme to be used by the SDK.
@property (nonatomic, strong) DTThemeConfiguration * _Nonnull theme;
/// Use this init method to start the SDK with a mobile token obtained after a server-to-server init
/// call.
/// After this class is initialized, you should define its delegate, the <code>options</code> properties
/// and a <code>theme</code> if desired.
/// \param mobileToken The mobileToken that has previously
/// been initialized with a server-to-server init call.
///
- (nonnull instancetype)initWithMobileToken:(NSString * _Nonnull)mobileToken OBJC_DESIGNATED_INITIALIZER;
/// Use this init method to start the SDK with a mobile token and the provided <code>card</code> for the transaction.
/// For this to work, you can only send one payment method in your server-to-server init call.
/// Use this init method if you use your own UI fields for the card information.
/// \param mobileToken The mobileToken that has previously
/// been initialized with a server-to-server init call.
///
/// \param card Card object used for the transaction.
///
- (nonnull instancetype)initWithMobileToken:(NSString * _Nonnull)mobileToken card:(DTCard * _Nonnull)card OBJC_DESIGNATED_INITIALIZER;
/// Use this init method to start the SDK with a mobile token and a single saved payment method.
/// The payment will be started with this saved payment method.
/// \param mobileToken The mobileToken that has previously
/// been initialized with a server-to-server init call.
///
/// \param savedPaymentMethod The saved payment method to use for this payment.
///
- (nonnull instancetype)initWithMobileToken:(NSString * _Nonnull)mobileToken savedPaymentMethod:(DTSavedPaymentMethod * _Nonnull)savedPaymentMethod OBJC_DESIGNATED_INITIALIZER;
/// Use this init method to start the SDK with a mobile token and a selection of one or more saved
/// payment methods to display.
/// The user will then be able to tap on their desired saved payment method to finalize the payment.
/// \param mobileToken The mobileToken that has previously
/// been initialized with a server-to-server init call.
///
/// \param savedPaymentMethods Specify here the saved payment methods that are
/// available for selection to the user.
///
- (nonnull instancetype)initWithMobileToken:(NSString * _Nonnull)mobileToken savedPaymentMethods:(NSArray<DTSavedPaymentMethod *> * _Nonnull)savedPaymentMethods OBJC_DESIGNATED_INITIALIZER;
/// Starts the SDK and displays any needed user interface using the
/// provided <code>presentingController</code>. Note that a transaction
/// can only be started once. For SwiftUI, use <code>View.datatrans(startWithTransaction:)</code> instead.
/// \param presentingController <code>UIViewController</code>
/// used to present the user interface during an on-going transaction
///
- (void)startWithPresentingController:(UIViewController * _Nonnull)presentingController;
/// :nodoc:
- (void)didHandleError:(NSError * _Nonnull)error;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class DTTransactionSuccess;
@class DTTransactionError;

/// Implement TransactionDelegate to be notified when a transaction
/// ends. TransactionDelegate will notify you about the success, error
/// or cancel state of the processed transaction.
SWIFT_PROTOCOL_NAMED("TransactionDelegate")
@protocol DTTransactionDelegate
/// This is called after a transaction has been successfully
/// completed. This callback provides details about the transaction.
/// \param transaction The object containing the information
/// of the completed transaction.
///
/// \param result The object including the information related
/// to the transaction success.
///
- (void)transactionDidFinish:(DTTransaction * _Nonnull)transaction result:(DTTransactionSuccess * _Nonnull)result;
/// This is called after a transaction fails or encounters an error.
/// Keep in mind that the SDK shows the error to the user before
/// this is invoked. Therefore, this callback can be used to cancel
/// any on-going process involving the transaction.
/// You may also use the error details provided here and display it
/// the way you want when suppressing the error message within
/// the TransactionOptions.
/// \param transaction The object containing the information
/// of the failed transaction.
///
/// \param error The error that occurred.
///
- (void)transactionDidFail:(DTTransaction * _Nonnull)transaction error:(DTTransactionError * _Nonnull)error;
@optional
/// This is called after a transaction has been cancelled. This callback
/// can be used to cancel any on-going process involving the transaction.
/// Some payment methods - such as Twint that involves an app-switch -
/// also call this method when a payment error or decline occurs, to
/// prevent showing an error dialog twice, as an error is already
/// displayed in the payment application.
/// \param transaction The object containing the
/// information of the cancelled transaction.
///
- (void)transactionDidCancel:(DTTransaction * _Nonnull)transaction;
@end


/// This class includes the error message and other details of a transaction.
SWIFT_CLASS_NAMED("TransactionError")
@interface DTTransactionError : NSError
/// The error code for technical errors.
/// Use this constant to compare it to a <code>TransactionError</code>’s <code>code</code>.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger technical;)
+ (NSInteger)technical SWIFT_WARN_UNUSED_RESULT;
/// The error code for validation errors.
/// Use this constant to compare it to a <code>TransactionError</code>’s <code>code</code>.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger validation;)
+ (NSInteger)validation SWIFT_WARN_UNUSED_RESULT;
/// The error code for authentication errors.
/// Use this constant to compare it to a <code>TransactionError</code>’s <code>code</code>.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger authentication;)
+ (NSInteger)authentication SWIFT_WARN_UNUSED_RESULT;
/// The error code for authorization errors.
/// Use this constant to compare it to a <code>TransactionError</code>’s <code>code</code>.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger authorization;)
+ (NSInteger)authorization SWIFT_WARN_UNUSED_RESULT;
/// The payment method used during the transaction.
/// This is for use from Objective-C only. This property wraps the
/// <code>rawValue</code> of a <code>DTPaymentMethodType</code> in an <code>NSNumber</code>.
@property (nonatomic, readonly, strong) NSNumber * _Nullable paymentMethodType;
/// The identifier of the failed transaction
@property (nonatomic, readonly, copy) NSString * _Nullable transactionId;
/// The BackendError that contains the Datatrans error name
@property (nonatomic, readonly, strong) DTBackendError * _Nullable backendError;
/// :nodoc:
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithDomain:(NSString * _Nonnull)domain code:(NSInteger)code userInfo:(NSDictionary<NSString *, id> * _Nullable)dict OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

enum DTDCCShowMode : NSInteger;

/// This class can be used to specify miscellaneous options related to the transaction.
SWIFT_CLASS_NAMED("TransactionOptions")
@interface DTTransactionOptions : NSObject
/// Your unique URL scheme to be used by other apps (e.g. Twint)
/// to return to the merchant app.
@property (nonatomic, copy) NSString * _Nullable appCallbackScheme;
/// Specify the <code>ApplePayConfig</code> object here. This is mandatory
/// for Apple Pay transactions.
@property (nonatomic, strong) DTApplePayConfig * _Nullable applePayConfig;
/// Specify the <code>BoncardConfig</code> object here. This can be used to configure
/// how the <code>PaymentMethodType.Boncard</code> payment method type
/// should be displayed in the SDK. If not specified, a default value will be used.
@property (nonatomic, strong) DTBoncardConfig * _Nullable boncardConfig;
/// Use this setting to choose which label to display for the card option
/// in the payment method selection: “Credit card”, “Debit card”, or “Credit or debit card”.
/// The latter is used by default.
@property (nonatomic) enum DTCardLabelType cardLabelType;
/// Use this to change the name of the Klarna payment method, to
/// e.g. “Lastschrift”.
/// If not specified, the name is “Klarna”.
@property (nonatomic, copy) NSString * _Nullable customKlarnaPaymentMethodName;
/// :nodoc:
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nullable merchantProperties;
/// Use this setting to display or hide critical and transaction errors.
@property (nonatomic) BOOL suppressCriticalErrorDialog;
/// Use this setting to switch from production to sandbox. If not specified,
/// the SDK will call the Datatrans production environment.
@property (nonatomic) BOOL testing;
/// In case you use Twint and can’t list all Twint app schemes from “twint-issuer1” to “twint-issuer39”
/// under <code>LSApplicationQueriesSchemes</code>, use this setting to specify the highest one you do list.
/// The default value is 39. Listing “twint-extended” is always required to use Twint.
/// important:
/// Reducing <code>twintMaxIssuerNumber</code> has an adverse effect on the user experience.
@property (nonatomic) NSInteger twintMaxIssuerNumber;
/// Whether secure connections to datatrans servers require a certificate
/// chain signed with a specific CA private key. The device’s trust settings
/// are explicitly ignored, i.e. custom installed/white-listed certificates
/// and/or CAs will not work.
/// Please be advised that enabling this option will break your app in many
/// corporate networks with anti-malware/-theft/-espionage SSL proxying.
@property (nonatomic) BOOL useCertificatePinning;
/// Sometimes, apps display a loading animation before starting the SDK.
/// You can set the <code>customInitialLoaderDelegate</code> option if you
/// want to keep showing this animation instead of the SDK’s loader during
/// initial SDK network requests.
/// important:
/// Your loader must be visible before starting the SDK.
/// Be aware that the SDK blocks user input. Your loading screen can not have a
/// cancel button or give the impression that users can still interact with the UI.
@property (nonatomic, weak) id <DTInitialLoaderDelegate> _Nullable customInitialLoaderDelegate;
/// Option to control when the DCC (Dynamic Currency Conversion) screen is presented
/// for payments with saved cards (alias/tokenized payments).
/// The default is <code>DCCShowMode.always</code>, meaning DCC is always shown when available.
/// See <code>DCCShowMode</code> for additional information.
@property (nonatomic) enum DTDCCShowMode savedCardDCCShowMode;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Mode to control when DCC is presented for saved card payments (alias/tokenized payments).
typedef SWIFT_ENUM_NAMED(NSInteger, DTDCCShowMode, "DCCShowMode", open) {
/// The DCC screen is always shown when the merchant is set up and the saved card is eligible for DCC.
  DTDCCShowModeAlways = 0,
/// DCC is initially shown repeatedly for each eligible card. The more often a user declines DCC
/// for a given saved card, the less often the DCC screen is shown for that card.
/// This mode is recommended when customers frequently pay with saved cards to enhance
/// the user experience and reduce unnecessary clicks.
/// Note: the information whether DCC was previously declined is stored on the device only.
  DTDCCShowModeSmart = 1,
/// Show DCC only in guest mode and not for payments with saved cards.
  DTDCCShowModeNever = 2,
};


/// This class includes the success message and other details of a transaction.
/// You will also obtain a transactionId that you can use for operations
/// after the transaction (e.g. settlement, cancel or refund requests).
SWIFT_CLASS_NAMED("TransactionSuccess")
@interface DTTransactionSuccess : NSObject
/// The payment method used during the transaction.
@property (nonatomic, readonly) enum DTPaymentMethodType paymentMethodType;
/// Object containing the saved payment method details.
/// The saved payment method details are also returned to your webhook
/// and can be accessed with a status server-to-server request.
@property (nonatomic, readonly, strong) DTSavedPaymentMethod * _Nullable savedPaymentMethod;
/// The transactionId that you can use for operations after the
/// transaction (eg. settlement, cancel or refund requests).
@property (nonatomic, readonly, copy) NSString * _Nonnull transactionId;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end









#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
